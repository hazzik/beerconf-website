<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MvcExtensions</name>
    </assembly>
    <members>
        <member name="T:MvcExtensions.FilterProvider">
            <summary>
            The default filter provider which extract filters from <see cref="T:MvcExtensions.IFilterRegistry"/>
            </summary>
        </member>
        <member name="M:MvcExtensions.FilterProvider.#ctor(MvcExtensions.IFilterRegistry)">
            <summary>
            Initializes a new instance of the <see cref="T:MvcExtensions.FilterRegistry"/> class.
            </summary>
            <param name="filterRegistry">The filter registry</param>
        </member>
        <member name="M:MvcExtensions.FilterProvider.GetFilters(System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor)">
            <summary>
            Returns an enumerator that contains all the <see cref="T:System.Web.Mvc.IFilterProvider"/> instances in the service locator.
            </summary>
            <returns>
            The enumerator that contains all the <see cref="T:System.Web.Mvc.IFilterProvider"/> instances in the service locator.
            </returns>
            <param name="controllerContext">The controller context.</param><param name="actionDescriptor">The action descriptor.</param>
        </member>
        <member name="T:MvcExtensions.RespondWithResult">
            <summary>
            Defines an action result which is used to find matching responder.
            </summary>
        </member>
        <member name="M:MvcExtensions.RespondWithResult.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:MvcExtensions.RespondWithResult"/> class.
            </summary>
            <param name="model">The model.</param>
        </member>
        <member name="M:MvcExtensions.RespondWithResult.WithView(System.String)">
            <summary>
            Withes the view.
            </summary>
            <param name="viewName">Name of the view.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.RespondWithResult.WithView(System.String,System.String)">
            <summary>
            Withes the view.
            </summary>
            <param name="viewName">Name of the view.</param>
            <param name="masterName">Name of the master.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.RespondWithResult.WithRedirect(System.String)">
            <summary>
            Withes the redirect.
            </summary>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.RespondWithResult.WithRedirect(System.String,System.Object)">
            <summary>
            Withes the redirect.
            </summary>
            <param name="action">The action.</param>
            <param name="routeValues">The route values.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.RespondWithResult.WithRedirect(System.String,System.String)">
            <summary>
            Withes the redirect.
            </summary>
            <param name="action">The action.</param>
            <param name="controller">The controller.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.RespondWithResult.WithRedirect(System.String,System.String,System.Object)">
            <summary>
            Withes the redirect.
            </summary>
            <param name="action">The action.</param>
            <param name="controller">The controller.</param>
            <param name="routeValues">The route values.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.RespondWithResult.WithFlash(System.Object)">
            <summary>
            Withes the flash.
            </summary>
            <param name="messages">The messages.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.RespondWithResult.ExecuteResult(System.Web.Mvc.ControllerContext)">
            <summary>
            Enables processing of the result of an action method by a custom type that inherits from the <see cref="T:System.Web.Mvc.ActionResult"/> class.
            </summary>
            <param name="context">The context in which the result is executed. The context information includes the controller, HTTP content, request context, and route data.</param>
        </member>
        <member name="P:MvcExtensions.RespondWithResult.Model">
            <summary>
            Gets the model.
            </summary>
            <value>The model.</value>
        </member>
        <member name="P:MvcExtensions.RespondWithResult.ViewName">
            <summary>
            Gets the name of the view.
            </summary>
            <value>The name of the view.</value>
        </member>
        <member name="P:MvcExtensions.RespondWithResult.MasterName">
            <summary>
            Gets the name of the master.
            </summary>
            <value>The name of the master.</value>
        </member>
        <member name="P:MvcExtensions.RespondWithResult.RedirectController">
            <summary>
            Gets the redirect controller.
            </summary>
            <value>The redirect controller.</value>
        </member>
        <member name="P:MvcExtensions.RespondWithResult.RedirectAction">
            <summary>
            Gets the redirect action.
            </summary>
            <value>The redirect action.</value>
        </member>
        <member name="P:MvcExtensions.RespondWithResult.RedirectRouteValues">
            <summary>
            Gets the redirect route values.
            </summary>
            <value>The redirect route values.</value>
        </member>
        <member name="P:MvcExtensions.RespondWithResult.FlashMessages">
            <summary>
            Gets the flash messages.
            </summary>
            <value>The flash messages.</value>
        </member>
        <member name="T:MvcExtensions.WrappedActionResultWithFlash`1">
            <summary>
            Defines an action result which is used to wrap another action result.
            </summary>
            <typeparam name="TActionResult">The type of the action result.</typeparam>
        </member>
        <member name="M:MvcExtensions.WrappedActionResultWithFlash`1.#ctor(`0,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:MvcExtensions.WrappedActionResultWithFlash`1"/> class.
            </summary>
            <param name="wrappingResult">The wrapping result.</param>
            <param name="flashMessages">The flash messages.</param>
        </member>
        <member name="M:MvcExtensions.WrappedActionResultWithFlash`1.ExecuteResult(System.Web.Mvc.ControllerContext)">
            <summary>
            Enables processing of the result of an action method by a custom type that inherits from the <see cref="T:System.Web.Mvc.ActionResult"/> class.
            </summary>
            <param name="context">The context in which the result is executed. The context information includes the controller, HTTP content, request context, and route data.</param>
        </member>
        <member name="P:MvcExtensions.WrappedActionResultWithFlash`1.WrappingResult">
            <summary>
            Gets or sets the wrapping result.
            </summary>
            <value>The wrapping result.</value>
        </member>
        <member name="P:MvcExtensions.WrappedActionResultWithFlash`1.FlashMessages">
            <summary>
            Gets or sets the flash messages.
            </summary>
            <value>The flash messages.</value>
        </member>
        <member name="T:MvcExtensions.ConfigureActionInvokersBase">
            <summary>
            Defines a class to configure mapping between controller activator and controller.
            </summary>
        </member>
        <member name="T:MvcExtensions.ConfigurableTypeMappingBase`2">
            <summary>
            Defines a class to configure type mapping.
            </summary>
            <typeparam name="TType1">The type of the type1.</typeparam>
            <typeparam name="TType2">The type of the type2.</typeparam>
        </member>
        <member name="T:MvcExtensions.BootstrapperTask">
            <summary>
            Defines a base class which is executed when <see cref="T:MvcExtensions.ExtendedMvcApplication"/> starts and ends.
            </summary>
        </member>
        <member name="T:MvcExtensions.Task">
            <summary>
            Represents an interface which supports execution order.
            </summary>
        </member>
        <member name="T:MvcExtensions.Disposable">
            <summary>
            Defines a base class which holds reference of one or more resource object.
            </summary>
        </member>
        <member name="M:MvcExtensions.Disposable.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:MvcExtensions.Disposable"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:MvcExtensions.Disposable.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:MvcExtensions.Disposable.DisposeCore">
            <summary>
            Disposes the resources.
            </summary>
        </member>
        <member name="M:MvcExtensions.Task.Execute">
            <summary>
            Executes the task.
            </summary><returns></returns>
        </member>
        <member name="M:MvcExtensions.ConfigurableTypeMappingBase`2.#ctor(MvcExtensions.TypeMappingRegistry{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:MvcExtensions.ConfigurableTypeMappingBase`2"/> class.
            </summary>
            <param name="registry">The registry.</param>
        </member>
        <member name="M:MvcExtensions.ConfigurableTypeMappingBase`2.Execute">
            <summary>
            Executes the task.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ConfigurableTypeMappingBase`2.Configure">
            <summary>
            Configures this instance.
            </summary>
        </member>
        <member name="P:MvcExtensions.ConfigurableTypeMappingBase`2.Registry">
            <summary>
            Gets or sets the registry.
            </summary>
            <value>The registry.</value>
        </member>
        <member name="M:MvcExtensions.ConfigureActionInvokersBase.#ctor(MvcExtensions.TypeMappingRegistry{System.Web.Mvc.Controller,System.Web.Mvc.IActionInvoker})">
            <summary>
            Initializes a new instance of the <see cref="T:MvcExtensions.ConfigureActionInvokersBase"/> class.
            </summary>
            <param name="registry">The registry.</param>
        </member>
        <member name="T:MvcExtensions.ConfigureControllerActivatorsBase">
            <summary>
            Defines a class to configure mapping between controller activator and controller.
            </summary>
        </member>
        <member name="M:MvcExtensions.ConfigureControllerActivatorsBase.#ctor(MvcExtensions.TypeMappingRegistry{System.Web.Mvc.Controller,System.Web.Mvc.IControllerActivator})">
            <summary>
            Initializes a new instance of the <see cref="T:MvcExtensions.ConfigureControllerActivatorsBase"/> class.
            </summary>
            <param name="registry">The registry.</param>
        </member>
        <member name="T:MvcExtensions.ConfigureModelBindersBase">
            <summary>
            Defines a class to configure mapping between model binder and model.
            </summary>
        </member>
        <member name="M:MvcExtensions.ConfigureModelBindersBase.#ctor(MvcExtensions.TypeMappingRegistry{System.Object,System.Web.Mvc.IModelBinder})">
            <summary>
            Initializes a new instance of the <see cref="T:MvcExtensions.ConfigureModelBindersBase"/> class.
            </summary>
            <param name="registry">The registry.</param>
        </member>
        <member name="T:MvcExtensions.ConfigureViewPageActivatorsBase">
            <summary>
            Defines a class to configure mapping between view page activator and view.
            </summary>
        </member>
        <member name="M:MvcExtensions.ConfigureViewPageActivatorsBase.#ctor(MvcExtensions.TypeMappingRegistry{System.Web.Mvc.IView,System.Web.Mvc.IViewPageActivator})">
            <summary>
            Initializes a new instance of the <see cref="T:MvcExtensions.ConfigureViewPageActivatorsBase"/> class.
            </summary>
            <param name="registry">The registry.</param>
        </member>
        <member name="T:MvcExtensions.DependsOnAttribute">
            <summary>
            Defined an attribute which is used to mark the depended tasks
            </summary>
        </member>
        <member name="M:MvcExtensions.DependsOnAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:MvcExtensions.DependsOnAttribute"/> class.
            </summary>
            <param name="taskType">Type of the task.</param>
        </member>
        <member name="M:MvcExtensions.DependsOnAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MvcExtensions.DependsOnAttribute"/> class.
            </summary>
            <param name="typeName">Name of the type.</param>
        </member>
        <member name="P:MvcExtensions.DependsOnAttribute.TaskType">
            <summary>
            Gets or sets the type of the task.
            </summary>
            <value>The type of the task.</value>
        </member>
        <member name="T:MvcExtensions.TaskContinuation">
            <summary>
            Describes how the next task in the chain will be handled.
            </summary>
        </member>
        <member name="F:MvcExtensions.TaskContinuation.Continue">
            <summary>
            Executes the next task
            </summary>
        </member>
        <member name="F:MvcExtensions.TaskContinuation.Skip">
            <summary>
            Skips the next task.
            </summary>
        </member>
        <member name="F:MvcExtensions.TaskContinuation.Break">
            <summary>
            Stops the execution.
            </summary>
        </member>
        <member name="T:MvcExtensions.CompressAttribute">
            <summary>
            Defines a class which is used to compress the response with the client supported algorithm.
            <remarks>This  filter does  not execute for child action.</remarks>
            </summary>
        </member>
        <member name="M:MvcExtensions.CompressAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MvcExtensions.CompressAttribute"/> class.
            </summary>
        </member>
        <member name="M:MvcExtensions.CompressAttribute.OnResultExecuting(System.Web.Mvc.ResultExecutingContext)">
            <summary>
            Called before an action result executes.
            </summary>
            <param name="filterContext">The filter context.</param>
        </member>
        <member name="M:MvcExtensions.CompressAttribute.OnResultExecuted(System.Web.Mvc.ResultExecutedContext)">
            <summary>
            Called after an action result executes.
            </summary>
            <param name="filterContext">The filter context.</param>
        </member>
        <member name="T:MvcExtensions.ExportViewDataToTempDataAttribute">
            <summary>
            Defines an attribute which is used to copy viewdata in tempdata.
            <remarks>This  filter does  not execute for child action.</remarks>
            </summary>
        </member>
        <member name="T:MvcExtensions.ViewDataTempDataTransferAttribute">
            <summary>
            Defines an abstract attribute which is used to transfer data between viewdata and tempdata.
            </summary>
        </member>
        <member name="M:MvcExtensions.ViewDataTempDataTransferAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MvcExtensions.ViewDataTempDataTransferAttribute"/> class.
            </summary>
        </member>
        <member name="M:MvcExtensions.ViewDataTempDataTransferAttribute.OnActionExecuting(System.Web.Mvc.ActionExecutingContext)">
            <summary>
            Called before an action method executes.
            </summary>
            <param name="filterContext">The filter context.</param>
        </member>
        <member name="M:MvcExtensions.ViewDataTempDataTransferAttribute.OnActionExecuted(System.Web.Mvc.ActionExecutedContext)">
            <summary>
            Called after the action method executes.
            </summary>
            <param name="filterContext">The filter context.</param>
        </member>
        <member name="P:MvcExtensions.ViewDataTempDataTransferAttribute.DefaultKey">
            <summary>
            Gets or sets the default key.
            </summary>
            <value>The default key.</value>
        </member>
        <member name="P:MvcExtensions.ViewDataTempDataTransferAttribute.Key">
            <summary>
            Gets or sets the key.
            </summary>
            <value>The key.</value>
        </member>
        <member name="M:MvcExtensions.ExportViewDataToTempDataAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MvcExtensions.ExportViewDataToTempDataAttribute"/> class.
            </summary>
        </member>
        <member name="M:MvcExtensions.ExportViewDataToTempDataAttribute.OnActionExecuted(System.Web.Mvc.ActionExecutedContext)">
            <summary>
            Called after the action method executes.
            </summary>
            <param name="filterContext">The filter context.</param>
        </member>
        <member name="T:MvcExtensions.ExtendedAuthorizeAttribute">
            <summary>
            Defines a base class which is used to create custom authorization.
            </summary>
        </member>
        <member name="M:MvcExtensions.ExtendedAuthorizeAttribute.OnAuthorization(System.Web.Mvc.AuthorizationContext)">
            <summary>
            Called when authorization is required.
            </summary>
            <param name="filterContext">The filter context.</param>
        </member>
        <member name="M:MvcExtensions.ExtendedAuthorizeAttribute.IsAuthorized(System.Web.Mvc.AuthorizationContext)">
            <summary>
            Determines whether the specified filter context is authorized.
            </summary>
            <param name="filterContext">The filter context.</param>
            <returns>
            <c>true</c> if the specified filter context is authorized; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MvcExtensions.ExtendedAuthorizeAttribute.HandleUnauthorized(System.Web.Mvc.AuthorizationContext)">
            <summary>
            Handles the unauthorized request.
            </summary>
            <param name="filterContext">The filter context.</param>
        </member>
        <member name="M:MvcExtensions.ExtendedAuthorizeAttribute.OnCacheAuthorization(System.Web.Mvc.AuthorizationContext)">
            <summary>
            Called when cache module verifies the cache status.
            </summary>
            <param name="filterContext">The filter context.</param>
            <returns></returns>
        </member>
        <member name="T:MvcExtensions.ImportViewDataFromTempDataAttribute">
            <summary>
            Defines an attribute which is used to copy  the previous viewdata from the tempdata into current viewdata.
            <remarks>This  filter does  not execute for child action.</remarks>
            </summary>
        </member>
        <member name="M:MvcExtensions.ImportViewDataFromTempDataAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MvcExtensions.ImportViewDataFromTempDataAttribute"/> class.
            </summary>
        </member>
        <member name="M:MvcExtensions.ImportViewDataFromTempDataAttribute.OnActionExecuting(System.Web.Mvc.ActionExecutingContext)">
            <summary>
            Called before an action method executes.
            </summary>
            <param name="filterContext">The filter context.</param>
        </member>
        <member name="P:MvcExtensions.ImportViewDataFromTempDataAttribute.ReplaceExisting">
            <summary>
            Gets or sets a value indicating whether to replace the current viewdata with previous viewdata when same viewdata key exists.
            </summary>
            <value><c>true</c> if [replace existing]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MvcExtensions.ImportViewDataFromTempDataAttribute.IncludeParentAction">
            <summary>
            Gets or sets a value indicating whether to import parent action.
            </summary>
            <value><c>true</c> if [include parent]; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:MvcExtensions.ExtendedJsonResult">
            <summary>
            Defines a class which is used to return json result.
            </summary>
        </member>
        <member name="M:MvcExtensions.ExtendedJsonResult.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MvcExtensions.ExtendedJsonResult"/> class.
            </summary>
        </member>
        <member name="M:MvcExtensions.ExtendedJsonResult.#ctor(System.Collections.Generic.IEnumerable{System.Web.Script.Serialization.JavaScriptConverter})">
            <summary>
            Initializes a new instance of the <see cref="T:MvcExtensions.ExtendedJsonResult"/> class.
            </summary>
            <param name="jsonConverters">The json converters.</param>
        </member>
        <member name="M:MvcExtensions.ExtendedJsonResult.ExecuteResult(System.Web.Mvc.ControllerContext)">
            <summary>
            Enables processing of the result of an action method by a custom type that inherits from the <see cref="T:System.Web.Mvc.ActionResult"/> class.
            </summary>
            <param name="context">The context within which the result is executed.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="context"/> parameter is null.</exception>
        </member>
        <member name="P:MvcExtensions.ExtendedJsonResult.JsonConverters">
            <summary>
            Gets the json converters.
            </summary>
            <value>The json converters.</value>
        </member>
        <member name="T:MvcExtensions.XmlResult">
            <summary>
            Defines a class which is used to return xml result.
            </summary>
        </member>
        <member name="M:MvcExtensions.XmlResult.ExecuteResult(System.Web.Mvc.ControllerContext)">
            <summary>
            Enables processing of the result of an action method by a custom type that inherits from the <see cref="T:System.Web.Mvc.ActionResult"/> class.
            </summary>
            <param name="context">The context in which the result is executed. The context information includes the controller, HTTP content, request context, and route data.</param>
        </member>
        <member name="P:MvcExtensions.XmlResult.ContentType">
            <summary>
            Gets or sets the type of the content.
            </summary>
            <value></value>
            <returns>The type of the content.</returns>
        </member>
        <member name="P:MvcExtensions.XmlResult.Data">
            <summary>
            Gets or sets the data.
            </summary>
            <value></value>
            <returns>The data.</returns>
        </member>
        <member name="T:MvcExtensions.BootstrapperTasksRegistry">
            <summary>
            Defines a Registry class which holds the list of the task that would be executed when bootstrapping the application.
            </summary>
        </member>
        <member name="T:MvcExtensions.IBootstrapperTasksRegistry">
            <summary>
            Defines a interface which is used to hold the list of the task that would be executed when bootstrapping the application.
            </summary>
        </member>
        <member name="T:MvcExtensions.IFluentSyntax">
            <summary>
            Hides the common object members in development environment.
            </summary>
        </member>
        <member name="M:MvcExtensions.IFluentSyntax.Equals(System.Object)">
            <summary>
            Determines whether two <see cref="T:System.Object"/> instances are equal.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MvcExtensions.IFluentSyntax.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>A hash code for the current <see cref="T:System.Object"/>.</returns>
        </member>
        <member name="M:MvcExtensions.IFluentSyntax.GetType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the current instance.
            </summary>
            <returns>The <see cref="T:System.Type"/> instance that represents the exact runtime type of the current instance.</returns>
        </member>
        <member name="M:MvcExtensions.IFluentSyntax.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.</returns>
        </member>
        <member name="M:MvcExtensions.IBootstrapperTasksRegistry.Include``1">
            <summary>
            Includes the specified task.
            </summary>
            <typeparam name="TTask">The type of the task.</typeparam>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.IBootstrapperTasksRegistry.Include``1(System.Action{``0})">
            <summary>
            Includes the specified task and also allows to configure.
            </summary>
            <typeparam name="TTask">The type of the task.</typeparam>
            <param name="configure">The configure.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.IBootstrapperTasksRegistry.Exclude``1">
            <summary>
            Excludes the specified task which might have  implicitly added.
            </summary>
            <typeparam name="TTask">The type of the task.</typeparam>
            <returns></returns>
        </member>
        <member name="P:MvcExtensions.IBootstrapperTasksRegistry.TaskConfigurations">
            <summary>
            Gets or sets the task configurations.
            </summary>
            <value>The tasks.</value>
        </member>
        <member name="M:MvcExtensions.BootstrapperTasksRegistry.Include``1">
            <summary>
            Includes the specified task.
            </summary>
            <typeparam name="TTask">The type of the task.</typeparam>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.BootstrapperTasksRegistry.Include``1(System.Action{``0})">
            <summary>
            Includes the specified task and also allows to configure.
            </summary>
            <typeparam name="TTask">The type of the task.</typeparam>
            <param name="configure">The configure.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.BootstrapperTasksRegistry.Exclude``1">
            <summary>
            Excludes this instance.
            </summary>
            <typeparam name="TTask">The type of the task.</typeparam>
            <returns></returns>
        </member>
        <member name="P:MvcExtensions.BootstrapperTasksRegistry.Current">
            <summary>
            Gets the singleton instance.
            </summary>
            <value>The instance.</value>
        </member>
        <member name="P:MvcExtensions.BootstrapperTasksRegistry.TaskConfigurations">
            <summary>
            Gets or sets the tasks.
            </summary>
            <value>The tasks.</value>
        </member>
        <member name="T:MvcExtensions.IgnorableTypesBootstrapperTask`2">
            <summary>
            Defines an interface which is used to  indicates the implemented task can ignore types.
            </summary>
        </member>
        <member name="M:MvcExtensions.IgnorableTypesBootstrapperTask`2.Ignore``1">
            <summary>
            Ignores this instance.
            </summary>
            <typeparam name="TType">The type of the ignore type.</typeparam>
            <returns></returns>
        </member>
        <member name="P:MvcExtensions.IgnorableTypesBootstrapperTask`2.IgnoredTypes">
            <summary>
            Gets the ignored types.
            </summary>
            <value>The ignored types.</value>
        </member>
        <member name="T:MvcExtensions.RegisterAreas">
            <summary>
            Defines a class which is used to register available areas.
            </summary>
        </member>
        <member name="M:MvcExtensions.RegisterAreas.Execute">
            <summary>
            Executes the task.
            </summary>
            <returns></returns>
        </member>
        <member name="T:MvcExtensions.RegisterFilterProviders">
            <summary>
            Defines a class which is used to register available <seealso cref="T:System.Web.Mvc.IFilterProvider"/>.
            </summary>
        </member>
        <member name="M:MvcExtensions.RegisterFilterProviders.#ctor(MvcExtensions.ContainerAdapter)">
            <summary>
            Initializes a new instance of the <see cref="T:MvcExtensions.RegisterFilterProviders"/> class.
            </summary>
            <param name="container">The container.</param>
        </member>
        <member name="M:MvcExtensions.RegisterFilterProviders.Execute">
            <summary>
            Executes the task.
            </summary>
            <returns></returns>
        </member>
        <member name="P:MvcExtensions.RegisterFilterProviders.Container">
            <summary>
            Gets the container.
            </summary>
            <value>The container.</value>
        </member>
        <member name="T:MvcExtensions.RegisterActionInvokers">
            <summary>
            Defines a class which is used to register the default <seealso cref="T:System.Web.Mvc.IActionInvoker"/>.
            </summary>
        </member>
        <member name="M:MvcExtensions.RegisterActionInvokers.#ctor(MvcExtensions.ContainerAdapter)">
            <summary>
            Initializes a new instance of the <see cref="T:MvcExtensions.RegisterActionInvokers"/> class.
            </summary>
            <param name="container">The container.</param>
        </member>
        <member name="M:MvcExtensions.RegisterActionInvokers.Execute">
            <summary>
            Executes the task. Returns continuation of the next task(s) in the chain.
            </summary>
            <returns></returns>
        </member>
        <member name="P:MvcExtensions.RegisterActionInvokers.Container">
            <summary>
            Gets the container.
            </summary>
            <value>The container.</value>
        </member>
        <member name="T:MvcExtensions.RegisterControllerActivator">
            <summary>
            Defines a class which is used to register the default <seealso cref="T:System.Web.Mvc.IControllerActivator"/>.
            </summary>
        </member>
        <member name="M:MvcExtensions.RegisterControllerActivator.#ctor(MvcExtensions.ContainerAdapter)">
            <summary>
            Initializes a new instance of the <see cref="T:MvcExtensions.RegisterControllerActivator"/> class.
            </summary>
            <param name="container">The container.</param>
        </member>
        <member name="M:MvcExtensions.RegisterControllerActivator.Execute">
            <summary>
            Executes the task.
            </summary>
            <returns></returns>
        </member>
        <member name="P:MvcExtensions.RegisterControllerActivator.ControllerActivatorType">
            <summary>
            Gets or sets the type of the controller activator.
            </summary>
            <value>The type of the controller activator.</value>
        </member>
        <member name="P:MvcExtensions.RegisterControllerActivator.Container">
            <summary>
            Gets the container.
            </summary>
            <value>The container.</value>
        </member>
        <member name="T:MvcExtensions.RegisterFilters">
            <summary>
            Defines a class which is used to register available <seealso cref="T:System.Web.Mvc.IMvcFilter"/>.
            </summary>
        </member>
        <member name="M:MvcExtensions.RegisterFilters.#ctor(MvcExtensions.ContainerAdapter)">
            <summary>
            Initializes a new instance of the <see cref="T:MvcExtensions.RegisterFilters"/> class.
            </summary>
            <param name="container">The container.</param>
        </member>
        <member name="M:MvcExtensions.RegisterFilters.Execute">
            <summary>
            Executes the task. Returns continuation of the next task(s) in the chain.
            </summary>
            <returns></returns>
        </member>
        <member name="P:MvcExtensions.RegisterFilters.Container">
            <summary>
            Gets the container.
            </summary>
            <value>The container.</value>
        </member>
        <member name="T:MvcExtensions.RegisterModelBinderProvider">
            <summary>
            Defines a class which is used to register the default <seealso cref="T:System.Web.Mvc.IModelBinderProvider"/>.
            </summary>
        </member>
        <member name="M:MvcExtensions.RegisterModelBinderProvider.#ctor(MvcExtensions.ContainerAdapter)">
            <summary>
            Initializes a new instance of the <see cref="T:MvcExtensions.RegisterModelBinderProvider"/> class.
            </summary>
            <param name="container">The container.</param>
        </member>
        <member name="M:MvcExtensions.RegisterModelBinderProvider.Execute">
            <summary>
            Executes the task.
            </summary><returns></returns>
        </member>
        <member name="P:MvcExtensions.RegisterModelBinderProvider.ModelBinderProviderType">
            <summary>
            Gets or sets the type of the model binder provider.
            </summary>
            <value>The type of the model binder provider.</value>
        </member>
        <member name="P:MvcExtensions.RegisterModelBinderProvider.Container">
            <summary>
            Gets the container.
            </summary>
            <value>The container.</value>
        </member>
        <member name="T:MvcExtensions.RegisterViewPageActivator">
            <summary>
            Defines a class which is used to register the default <seealso cref="T:System.Web.Mvc.IViewPageActivator"/>.
            </summary>
        </member>
        <member name="M:MvcExtensions.RegisterViewPageActivator.#ctor(MvcExtensions.ContainerAdapter)">
            <summary>
            Initializes a new instance of the <see cref="T:MvcExtensions.RegisterControllerActivator"/> class.
            </summary>
            <param name="container">The container.</param>
        </member>
        <member name="M:MvcExtensions.RegisterViewPageActivator.Execute">
            <summary>
            Executes the task.
            </summary>
            <returns></returns>
        </member>
        <member name="P:MvcExtensions.RegisterViewPageActivator.ViewPageActivatorType">
            <summary>
            Gets or sets the type of the controller activator.
            </summary>
            <value>The type of the controller activator.</value>
        </member>
        <member name="P:MvcExtensions.RegisterViewPageActivator.Container">
            <summary>
            Gets the container.
            </summary>
            <value>The container.</value>
        </member>
        <member name="T:MvcExtensions.RegisterViews">
            <summary>
            Defines a class which is used to register available <seealso cref="T:System.Web.Mvc.IView"/>.
            </summary>
        </member>
        <member name="M:MvcExtensions.RegisterViews.#ctor(MvcExtensions.ContainerAdapter)">
            <summary>
            Initializes a new instance of the <see cref="T:MvcExtensions.RegisterViews"/> class.
            </summary>
            <param name="container">The container.</param>
        </member>
        <member name="M:MvcExtensions.RegisterViews.Execute">
            <summary>
            Executes the task.
            </summary><returns></returns>
        </member>
        <member name="P:MvcExtensions.RegisterViews.Container">
            <summary>
            Gets the container.
            </summary>
            <value>The container.</value>
        </member>
        <member name="T:MvcExtensions.ActionController`1">
            <summary>
            Defines an abstract controller which contains  CRUD actions in RESTFul way.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
        </member>
        <member name="T:MvcExtensions.IHasResponders">
            <summary>
            Defines an interface which indicates it contains list of <see cref="T:MvcExtensions.IResponder"/>.
            </summary>
        </member>
        <member name="P:MvcExtensions.IHasResponders.Responders">
            <summary>
            Gets the responders.
            </summary>
            <value>The responders.</value>
        </member>
        <member name="T:MvcExtensions.IRESTFulCreate">
            <summary>
            Defines an interface to create resource in RESTFul way.
            </summary>
        </member>
        <member name="M:MvcExtensions.IRESTFulCreate.New">
            <summary>
            Shows the form to create new resource.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.IRESTFulCreate.Create(System.Web.Mvc.FormCollection)">
            <summary>
            Creates the specified fields.
            </summary>
            <param name="fields">The fields.</param>
            <returns></returns>
        </member>
        <member name="T:MvcExtensions.IRESTFulUpdate`1">
            <summary>
            Defines an interface to update resource in RESTFul way.
            </summary>
        </member>
        <member name="M:MvcExtensions.IRESTFulUpdate`1.Edit(`0)">
            <summary>
            Shows the edit form to update resource.
            </summary>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.IRESTFulUpdate`1.Update(`0,System.Web.Mvc.FormCollection)">
            <summary>
            Updates the resource.
            </summary>
            <param name="id">The id.</param>
            <param name="fields">The fields.</param>
            <returns></returns>
        </member>
        <member name="T:MvcExtensions.IRESTFulDestroy`1">
            <summary>
            Defines an interface to destroy resource in RESTFul way.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
        </member>
        <member name="M:MvcExtensions.IRESTFulDestroy`1.Destroy(`0)">
            <summary>
            Destroys the specified id.
            </summary>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="T:MvcExtensions.IRESTFulDetails`1">
            <summary>
            Defines an interface to show resource in RESTFul way.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
        </member>
        <member name="M:MvcExtensions.IRESTFulDetails`1.Show(`0)">
            <summary>
            Shows the resource.
            </summary>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="T:MvcExtensions.IRESTFulList">
            <summary>
            Defines an interface to list resource in RESTFul way.
            </summary>
        </member>
        <member name="M:MvcExtensions.IRESTFulList.Index">
            <summary>
            List the resources.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ActionController`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MvcExtensions.ActionController`1"/> class.
            </summary>
        </member>
        <member name="M:MvcExtensions.ActionController`1.Index">
            <summary>
            Shows the resource list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ActionController`1.Show(`0)">
            <summary>
            Shows the individual resource.
            </summary>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ActionController`1.New">
            <summary>
            Shows the form for creating resource.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ActionController`1.Create(System.Web.Mvc.FormCollection)">
            <summary>
            Creates the resource.
            </summary>
            <param name="fields">The fields.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ActionController`1.Edit(`0)">
            <summary>
            Shows the edit form to update resource.
            </summary>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ActionController`1.Update(`0,System.Web.Mvc.FormCollection)">
            <summary>
            Updates the resource.
            </summary>
            <param name="id">The id.</param>
            <param name="fields">The fields.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ActionController`1.Destroy(`0)">
            <summary>
            Destroys the resource.
            </summary>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ActionController`1.RespondWith(System.Object)">
            <summary>
            Responds the with.
            </summary>
            <param name="model">The model.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ActionController`1.HandleUnknownAction(System.String)">
            <summary>
            Called when a request matches this controller, but no method with the specified action name is found in the controller.
            </summary>
            <param name="actionName">The name of the attempted action.</param>
        </member>
        <member name="P:MvcExtensions.ActionController`1.RespondersFactory">
            <summary>
            Gets or sets the responders factory.
            </summary>
            <value>The responders factory.</value>
        </member>
        <member name="P:MvcExtensions.ActionController`1.Responders">
            <summary>
            Gets the responders.
            </summary>
            <value>The responders.</value>
        </member>
        <member name="T:MvcExtensions.ControllerActivatorMappingExtensions">
            <summary>
            Defines an static class which contains extension methods of <see cref="T:MvcExtensions.TypeMappingRegistry`2"/>.
            </summary>
        </member>
        <member name="M:MvcExtensions.ControllerActivatorMappingExtensions.Register``2(MvcExtensions.TypeMappingRegistry{System.Web.Mvc.Controller,System.Web.Mvc.IControllerActivator})">
            <summary>
            Registers the specified instance.
            </summary>
            <typeparam name="TController">The type of the controller.</typeparam>
            <typeparam name="TControllerActivator">The type of the controller activator.</typeparam>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ControllerActivatorMappingExtensions.Register``3(MvcExtensions.TypeMappingRegistry{System.Web.Mvc.Controller,System.Web.Mvc.IControllerActivator})">
            <summary>
            Registers the specified instance.
            </summary>
            <typeparam name="TController1">The type of the controller1.</typeparam>
            <typeparam name="TController2">The type of the controller2.</typeparam>
            <typeparam name="TControllerActivator">The type of the controller activator.</typeparam>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ControllerActivatorMappingExtensions.Register``4(MvcExtensions.TypeMappingRegistry{System.Web.Mvc.Controller,System.Web.Mvc.IControllerActivator})">
            <summary>
            Registers the specified instance.
            </summary>
            <typeparam name="TController1">The type of the controller1.</typeparam>
            <typeparam name="TController2">The type of the controller2.</typeparam>
            <typeparam name="TController3">The type of the controller3.</typeparam>
            <typeparam name="TControllerActivator">The type of the action invoker.</typeparam>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ControllerActivatorMappingExtensions.Register``5(MvcExtensions.TypeMappingRegistry{System.Web.Mvc.Controller,System.Web.Mvc.IControllerActivator})">
            <summary>
            Registers the specified instance.
            </summary>
            <typeparam name="TController1">The type of the controller1.</typeparam>
            <typeparam name="TController2">The type of the controller2.</typeparam>
            <typeparam name="TController3">The type of the controller3.</typeparam>
            <typeparam name="TController4">The type of the controller4.</typeparam>
            <typeparam name="TControllerActivator">The type of the controller activator.</typeparam>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ControllerActivatorMappingExtensions.Register``1(MvcExtensions.TypeMappingRegistry{System.Web.Mvc.Controller,System.Web.Mvc.IControllerActivator},MvcExtensions.TypeCatalog)">
            <summary>
            Registers the specified instance.
            </summary>
            <typeparam name="TControllerActivator">The type of the action invoker.</typeparam>
            <param name="instance">The instance.</param>
            <param name="typeCatalog">The type catalog.</param>
            <returns></returns>
        </member>
        <member name="T:MvcExtensions.ActionResultExtensions">
            <summary>
            Defines a static class which contains extension methods for flash messages.
            </summary>
        </member>
        <member name="M:MvcExtensions.ActionResultExtensions.WithFlash(System.Web.Mvc.RedirectResult,System.Object)">
            <summary>
            Withes the flash.
            </summary>
            <param name="instance">The instance.</param>
            <param name="arguments">The arguments.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ActionResultExtensions.WithFlash(System.Web.Mvc.RedirectResult,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Withes the flash.
            </summary>
            <param name="instance">The instance.</param>
            <param name="arguments">The arguments.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ActionResultExtensions.WithFlash(System.Web.Mvc.RedirectToRouteResult,System.Object)">
            <summary>
            Withes the flash.
            </summary>
            <param name="instance">The instance.</param>
            <param name="arguments">The arguments.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ActionResultExtensions.WithFlash(System.Web.Mvc.RedirectToRouteResult,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Withes the flash.
            </summary>
            <param name="instance">The instance.</param>
            <param name="arguments">The arguments.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ActionResultExtensions.WithFlash(System.Web.Mvc.ViewResult,System.Object)">
            <summary>
            Withes the flash.
            </summary>
            <param name="instance">The instance.</param>
            <param name="arguments">The arguments.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ActionResultExtensions.WithFlash(System.Web.Mvc.ViewResult,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Withes the flash.
            </summary>
            <param name="instance">The instance.</param>
            <param name="arguments">The arguments.</param>
            <returns></returns>
        </member>
        <member name="T:MvcExtensions.RouteDataExtensions">
            <summary>
            Defines a class which contains extension method for <see cref="T:System.Web.Routing.RouteData"/>.
            </summary>
        </member>
        <member name="M:MvcExtensions.RouteDataExtensions.ControllerName(System.Web.Routing.RouteData)">
            <summary>
            Controllers the name.
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.RouteDataExtensions.ActionName(System.Web.Routing.RouteData)">
            <summary>
            Actions the name.
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="T:MvcExtensions.RESTFulRouteExtensions">
            <summary>
            Defines a static class to register RESTFul routes
            </summary>
        </member>
        <member name="M:MvcExtensions.RESTFulRouteExtensions.Resources``1(System.Web.Routing.RouteCollection)">
            <summary>
            Register the RESTFul routes for the specified controller.
            </summary>
            <typeparam name="TController">The type of the controller.</typeparam>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.RESTFulRouteExtensions.MapResources``1(System.Web.Mvc.AreaRegistrationContext)">
            <summary>
            Register the RESTFul area routes for the specified controller.
            </summary>
            <typeparam name="TController">The type of the controller.</typeparam>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="T:MvcExtensions.FlashHtmlExtensions">
            <summary>
            Defines a static class to render flash messages for <see cref="T:System.Web.Mvc.HtmlHelper"/>.
            </summary>
        </member>
        <member name="M:MvcExtensions.FlashHtmlExtensions.Flash(System.Web.Mvc.HtmlHelper,System.String,System.Boolean)">
            <summary>
            Flashes the specified instance.
            </summary>
            <param name="instance">The instance.</param>
            <param name="tagName">Name of the tag.</param>
            <param name="encoded">if set to <c>true</c> [encoded].</param>
            <returns></returns>
        </member>
        <member name="T:MvcExtensions.FlashStorage">
            <summary>
            Defines class which abstract the <see cref="T:System.Web.Mvc.TempDataDictionary"/> for storing flash messages.
            </summary>
        </member>
        <member name="F:MvcExtensions.FlashStorage.Key">
            <summary>
            The key in the tempdata upon which the messages are stored.
            </summary>
        </member>
        <member name="M:MvcExtensions.FlashStorage.#ctor(System.Web.Mvc.TempDataDictionary)">
            <summary>
            Initializes a new instance of the <see cref="T:MvcExtensions.FlashStorage"/> class.
            </summary>
            <param name="backingStore">The backing store.</param>
        </member>
        <member name="M:MvcExtensions.FlashStorage.Add(System.String,System.String)">
            <summary>
            Adds the specified type.
            </summary>
            <param name="type">The type.</param>
            <param name="message">The message.</param>
        </member>
        <member name="P:MvcExtensions.FlashStorage.BackingStore">
            <summary>
            Gets or sets the backing store.
            </summary>
            <value>The backing store.</value>
        </member>
        <member name="P:MvcExtensions.FlashStorage.Messages">
            <summary>
            Gets the messages.
            </summary>
            <value>The messages.</value>
        </member>
        <member name="T:MvcExtensions.RouteValuesHelpers">
            <summary>
            Helper class imported from original asp.net mvc source code.
            </summary>
        </member>
        <member name="M:MvcExtensions.RouteValuesHelpers.MergeRouteValues(System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Routing.RouteValueDictionary,System.Boolean)">
            <summary>
            Merges the route values.
            </summary>
            <param name="actionName">Name of the action.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="implicitRouteValues">The implicit route values.</param>
            <param name="routeValues">The route values.</param>
            <param name="includeImplicitMvcValues">if set to <c>true</c> [include implicit MVC values].</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.RouteValuesHelpers.GetRouteValues(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Gets the route values.
            </summary>
            <param name="routeValues">The route values.</param>
            <returns></returns>
        </member>
        <member name="T:MvcExtensions.ModelBinderMappingRegistryExtensions">
            <summary>
            Defines an static class which contains extension methods of <see cref="T:MvcExtensions.TypeMappingRegistry`2"/>.
            </summary>
        </member>
        <member name="M:MvcExtensions.ModelBinderMappingRegistryExtensions.Register``2(MvcExtensions.TypeMappingRegistry{System.Object,System.Web.Mvc.IModelBinder})">
            <summary>
            Registers the specified instance.
            </summary>
            <typeparam name="TModel">The type of the model.</typeparam>
            <typeparam name="TModelBinder">The type of the model binder.</typeparam>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ModelBinderMappingRegistryExtensions.Register``3(MvcExtensions.TypeMappingRegistry{System.Object,System.Web.Mvc.IModelBinder})">
            <summary>
            Registers the specified instance.
            </summary>
            <typeparam name="TModel1">The type of the model1.</typeparam>
            <typeparam name="TModel2">The type of the model2.</typeparam>
            <typeparam name="TModelBinder">The type of the model binder.</typeparam>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ModelBinderMappingRegistryExtensions.Register``4(MvcExtensions.TypeMappingRegistry{System.Object,System.Web.Mvc.IModelBinder})">
            <summary>
            Registers the specified instance.
            </summary>
            <typeparam name="TModel1">The type of the model1.</typeparam>
            <typeparam name="TModel2">The type of the model2.</typeparam>
            <typeparam name="TModel3">The type of the model3.</typeparam>
            <typeparam name="TModelBinder">The type of the model binder.</typeparam>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ModelBinderMappingRegistryExtensions.Register``5(MvcExtensions.TypeMappingRegistry{System.Object,System.Web.Mvc.IModelBinder})">
            <summary>
            Registers the specified instance.
            </summary>
            <typeparam name="TModel1">The type of the model1.</typeparam>
            <typeparam name="TModel2">The type of the model2.</typeparam>
            <typeparam name="TModel3">The type of the model3.</typeparam>
            <typeparam name="TModel4">The type of the model4.</typeparam>
            <typeparam name="TModelBinder">The type of the model binder.</typeparam>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ModelBinderMappingRegistryExtensions.Register``1(MvcExtensions.TypeMappingRegistry{System.Object,System.Web.Mvc.IModelBinder},MvcExtensions.TypeCatalog)">
            <summary>
            Registers the specified instance.
            </summary>
            <typeparam name="TModelBinder">The type of the action invoker.</typeparam>
            <param name="instance">The instance.</param>
            <param name="typeCatalog">The type catalog.</param>
            <returns></returns>
        </member>
        <member name="T:MvcExtensions.ExtendedModelBinderProvider">
            <summary>
            Defines a class which is used  resolve model binder for a give type.
            </summary>
        </member>
        <member name="M:MvcExtensions.ExtendedModelBinderProvider.#ctor(MvcExtensions.ContainerAdapter,MvcExtensions.TypeMappingRegistry{System.Object,System.Web.Mvc.IModelBinder})">
            <summary>
            Initializes a new instance of the <see cref="T:MvcExtensions.ExtendedModelBinderProvider"/> class.
            </summary>
            <param name="container">The container.</param>
            <param name="modelBinderRegistry">The model binder registry.</param>
        </member>
        <member name="M:MvcExtensions.ExtendedModelBinderProvider.GetBinder(System.Type)">
            <summary>
            Gets the binder.
            </summary>
            <param name="modelType">Type of the model.</param>
            <returns></returns>
        </member>
        <member name="P:MvcExtensions.ExtendedModelBinderProvider.Container">
            <summary>
            Gets or sets the container.
            </summary>
            <value>The container.</value>
        </member>
        <member name="P:MvcExtensions.ExtendedModelBinderProvider.ModelBinderRegistry">
            <summary>
            Gets or sets the controller activator registry.
            </summary>
            <value>The controller activator registry.</value>
        </member>
        <member name="T:MvcExtensions.CompareValidationMetadata">
            <summary>
            Represents a class to store compare validation metadata.
            </summary>
        </member>
        <member name="T:MvcExtensions.ModelValidationMetadata">
            <summary>
            Represents a base class to store validation metadata.
            </summary>
        </member>
        <member name="T:MvcExtensions.IModelValidationMetadata">
            <summary>
            Represents an interface to store validation metadata.
            </summary>
        </member>
        <member name="M:MvcExtensions.IModelValidationMetadata.CreateValidator(MvcExtensions.ExtendedModelMetadata,System.Web.Mvc.ControllerContext)">
            <summary>
            Creates the validator.
            </summary>
            <param name="modelMetadata">The model metadata.</param>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="P:MvcExtensions.IModelValidationMetadata.ErrorMessage">
            <summary>
            Gets or sets the error message.
            </summary>
            <value>The error message.</value>
        </member>
        <member name="P:MvcExtensions.IModelValidationMetadata.ErrorMessageResourceType">
            <summary>
            Gets or sets the type of the error message resource.
            </summary>
            <value>The type of the error message resource.</value>
        </member>
        <member name="P:MvcExtensions.IModelValidationMetadata.ErrorMessageResourceName">
            <summary>
            Gets or sets the name of the error message resource.
            </summary>
            <value>The name of the error message resource.</value>
        </member>
        <member name="M:MvcExtensions.ModelValidationMetadata.CreateValidator(MvcExtensions.ExtendedModelMetadata,System.Web.Mvc.ControllerContext)">
            <summary>
            Creates the validator.
            </summary>
            <param name="modelMetadata">The model metadata.</param>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ModelValidationMetadata.PopulateErrorMessage(System.ComponentModel.DataAnnotations.ValidationAttribute)">
            <summary>
            Populates the error message from the given metadata.
            </summary>
            <param name="validationAttribute"></param>
        </member>
        <member name="M:MvcExtensions.ModelValidationMetadata.CreateValidatorCore(MvcExtensions.ExtendedModelMetadata,System.Web.Mvc.ControllerContext)">
            <summary>
            Creates the validator.
            </summary>
            <param name="modelMetadata">The model metadata.</param>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="P:MvcExtensions.ModelValidationMetadata.ErrorMessage">
            <summary>
            Gets or sets the error message.
            </summary>
            <value>The error message.</value>
        </member>
        <member name="P:MvcExtensions.ModelValidationMetadata.ErrorMessageResourceType">
            <summary>
            Gets or sets the type of the error message resource.
            </summary>
            <value>The type of the error message resource.</value>
        </member>
        <member name="P:MvcExtensions.ModelValidationMetadata.ErrorMessageResourceName">
            <summary>
            Gets or sets the name of the error message resource.
            </summary>
            <value>The name of the error message resource.</value>
        </member>
        <member name="M:MvcExtensions.CompareValidationMetadata.CreateValidatorCore(MvcExtensions.ExtendedModelMetadata,System.Web.Mvc.ControllerContext)">
            <summary>
            Creates the validator.
            </summary>
            <param name="modelMetadata">The model metadata.</param>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="P:MvcExtensions.CompareValidationMetadata.OtherProperty">
            <summary>
            Gets or sets the other property.
            </summary>
            <value>The pattern.</value>
        </member>
        <member name="T:MvcExtensions.HtmlSelectModelMetadataItemBuilderExtensions">
            <summary>
            Extensions for <see cref="T:MvcExtensions.ModelMetadataItemBuilder`2"/> which add AsDropDownList and AsListBox methods 
            </summary>
        </member>
        <member name="M:MvcExtensions.HtmlSelectModelMetadataItemBuilderExtensions.AsDropDownList``2(MvcExtensions.ModelMetadataItemBuilder{``1,``0},System.String)">
            <summary>
            Marks the value to render as DropDownList element in edit mode.
            </summary>
            <param name="self">The instance.</param>
            <param name="viewDataKey">The view data key, the value of the view data key must be a <seealso cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.HtmlSelectModelMetadataItemBuilderExtensions.AsDropDownList``2(MvcExtensions.ModelMetadataItemBuilder{``1,``0},System.String,System.String)">
            <summary>
            Marks the value to render as DropDownList element in edit mode.
            </summary>
            <param name="self">The instance.</param>
            <param name="viewDataKey">The view data key, the value of the view data key must be a <seealso cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <param name="optionLabel">The option label.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.HtmlSelectModelMetadataItemBuilderExtensions.AsDropDownList``2(MvcExtensions.ModelMetadataItemBuilder{``1,``0},System.String,System.Func{System.String})">
            <summary>
            Marks the value to render as DropDownList element in edit mode.
            </summary>
            <param name="self">The instance.</param>
            <param name="viewDataKey">The view data key, the value of the view data key must be a <seealso cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <param name="optionLabel">The option label.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.HtmlSelectModelMetadataItemBuilderExtensions.AsDropDownList``2(MvcExtensions.ModelMetadataItemBuilder{``1,``0},System.String,System.String,System.String)">
            <summary>
            Marks the value to render as DropDownList element in edit mode.
            </summary>
            <param name="self">The instance.</param>
            <param name="viewDataKey">The view data key.</param>
            <param name="optionLabel">The option label.</param>
            <param name="template">The template.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.HtmlSelectModelMetadataItemBuilderExtensions.AsDropDownList``2(MvcExtensions.ModelMetadataItemBuilder{``1,``0},System.String,System.Func{System.String},System.String)">
            <summary>
            Marks the value to render as DropDownList element in edit mode.
            </summary>
            <param name="self">The instance.</param>
            <param name="viewDataKey">The view data key.</param>
            <param name="optionLabel">The option label.</param>
            <param name="template">The template.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.HtmlSelectModelMetadataItemBuilderExtensions.AsListBox``2(MvcExtensions.ModelMetadataItemBuilder{``1,``0},System.String)">
            <summary>
            Marks the value to render as ListBox in edit mode.
            </summary>
            <param name="self">The instance.</param>
            <param name="viewDataKey">The view data key, the value of the view data key must be a <seealso cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.HtmlSelectModelMetadataItemBuilderExtensions.AsListBox``2(MvcExtensions.ModelMetadataItemBuilder{``1,``0},System.String,System.String)">
            <summary>
            Marks the value to render as ListBox in edit mode.
            </summary>
            <param name="self">The instance.</param>
            <param name="viewDataKey">The view data key.</param>
            <param name="template">The template.</param>
            <returns></returns>
        </member>
        <member name="T:MvcExtensions.ModelMetadataItemExtensions">
            <summary>
            Defines an static class which contains extension methods of <see cref="T:MvcExtensions.ModelMetadataItem"/>.
            </summary>
        </member>
        <member name="M:MvcExtensions.ModelMetadataItemExtensions.GetValidationOrCreateNew``1(MvcExtensions.ModelMetadataItem)">
            <summary>
            Returns model validation metadata of type <typeparamref name="TValidationMetadata"/> associated with this <paramref name="item"/>. 
            New validation will be created if no one is found. 
            </summary>
            <param name="item"></param>
            <typeparam name="TValidationMetadata"></typeparam>
            <returns>Model validation metadata of type <typeparamref name="TValidationMetadata"/></returns>
        </member>
        <member name="M:MvcExtensions.ModelMetadataItemExtensions.GetValidation``1(MvcExtensions.ModelMetadataItem)">
            <summary>
            Returns model validation metadata of type <typeparamref name="TValidationMetadata"/> associated with this <paramref name="item"/> or null.
            </summary>
            <param name="item"></param>
            <typeparam name="TValidationMetadata"></typeparam>
            <returns>Model validation metadata of type <typeparamref name="TValidationMetadata"/> or null</returns>
        </member>
        <member name="M:MvcExtensions.ModelMetadataItemExtensions.GetAdditionalSettingOrCreateNew``1(MvcExtensions.ModelMetadataItem)">
            <summary>
            Returns model metadata additional setting of type <typeparamref name="TSetting"/> associated with this <paramref name="item"/>. 
            New model setting will be created if no one is found. 
            </summary>
            <param name="item"></param>
            <typeparam name="TSetting"></typeparam>
            <returns>Model validation metadata of type <typeparamref name="TSetting"/></returns>
        </member>
        <member name="M:MvcExtensions.ModelMetadataItemExtensions.GetAdditionalSetting``1(MvcExtensions.ModelMetadataItem)">
            <summary>
            Returns model metadata additional setting of type <typeparamref name="TSetting"/> associated with this <paramref name="item"/> or null. 
            </summary>
            <param name="item"></param>
            <typeparam name="TSetting"></typeparam>
            <returns>Model validation metadata of type <typeparamref name="TSetting"/> or null</returns>
        </member>
        <member name="T:MvcExtensions.HtmlResponder">
            <summary>
            Defines a responder which is used to return html.
            </summary>
        </member>
        <member name="T:MvcExtensions.Responder">
            <summary>
            Defines an abstract class which is used to respond to controller action.
            </summary>
        </member>
        <member name="T:MvcExtensions.IResponder">
            <summary>
            Defines an interface which is used to respond based upon the mime type.
            </summary>
        </member>
        <member name="M:MvcExtensions.IResponder.Include(System.String[])">
            <summary>
            Includes the specified actions.
            </summary>
            <param name="actions">The actions.</param>
        </member>
        <member name="M:MvcExtensions.IResponder.Exclude(System.String[])">
            <summary>
            Excludes the specified actions.
            </summary>
            <param name="actions">The actions.</param>
        </member>
        <member name="M:MvcExtensions.IResponder.CanRespondToAction(System.String)">
            <summary>
            Determines whether this instance [can respond to action] the specified action.
            </summary>
            <param name="action">The action.</param>
            <returns>
                <c>true</c> if this instance [can respond to action] the specified action; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MvcExtensions.IResponder.CanRespondToFormat(System.String)">
            <summary>
            Determines whether this instance [can respond to format] the specified format.
            </summary>
            <param name="format">The format.</param>
            <returns>
                <c>true</c> if this instance [can respond to format] the specified format; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MvcExtensions.IResponder.CanRespondToMimeType(System.String)">
            <summary>
            Determines whether this instance [can respond to MIME type] the specified MIME type.
            </summary>
            <param name="mimeType">Type of the MIME.</param>
            <returns>
                <c>true</c> if this instance [can respond to MIME type] the specified MIME type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MvcExtensions.IResponder.Respond(MvcExtensions.ResponderContext)">
            <summary>
            Responds the specified context.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:MvcExtensions.Responder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MvcExtensions.Responder"/> class.
            </summary>
        </member>
        <member name="M:MvcExtensions.Responder.Include(System.String[])">
            <summary>
            Includes the specified actions.
            </summary>
            <param name="actions">The actions.</param>
        </member>
        <member name="M:MvcExtensions.Responder.Exclude(System.String[])">
            <summary>
            Excludes the specified actions.
            </summary>
            <param name="actions">The actions.</param>
        </member>
        <member name="M:MvcExtensions.Responder.CanRespondToAction(System.String)">
            <summary>
            Determines whether this instance [can respond to action] the specified action.
            </summary>
            <param name="action">The action.</param>
            <returns>
                <c>true</c> if this instance [can respond to action] the specified action; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MvcExtensions.Responder.CanRespondToFormat(System.String)">
            <summary>
            Determines whether this instance [can respond to format] the specified format.
            </summary>
            <param name="format">The format.</param>
            <returns>
                <c>true</c> if this instance [can respond to format] the specified format; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MvcExtensions.Responder.CanRespondToMimeType(System.String)">
            <summary>
            Determines whether this instance [can respond to MIME type] the specified MIME type.
            </summary>
            <param name="mimeType">Type of the MIME.</param>
            <returns>
                <c>true</c> if this instance [can respond to MIME type] the specified MIME type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MvcExtensions.Responder.Respond(MvcExtensions.ResponderContext)">
            <summary>
            Responds the specified context.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="P:MvcExtensions.Responder.SupportedFormat">
            <summary>
            Gets or sets the supported format.
            </summary>
            <value>The supported format.</value>
        </member>
        <member name="P:MvcExtensions.Responder.SupportedMimeTypes">
            <summary>
            Gets or sets the supported MIME types.
            </summary>
            <value>The supported MIME types.</value>
        </member>
        <member name="P:MvcExtensions.Responder.ExcludedActions">
            <summary>
            Gets or sets the excluded actions.
            </summary>
            <value>The excluded actions.</value>
        </member>
        <member name="P:MvcExtensions.Responder.IncludedActions">
            <summary>
            Gets or sets the included actions.
            </summary>
            <value>The included actions.</value>
        </member>
        <member name="M:MvcExtensions.HtmlResponder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MvcExtensions.HtmlResponder"/> class.
            </summary>
        </member>
        <member name="M:MvcExtensions.HtmlResponder.Respond(MvcExtensions.ResponderContext)">
            <summary>
            Responds the specified context.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="T:MvcExtensions.JsonResponder">
            <summary>
            Defines an interface which returns json.
            </summary>
        </member>
        <member name="T:MvcExtensions.SerializableResponder">
            <summary>
            Defines an abstract class for data responder.
            </summary>
        </member>
        <member name="M:MvcExtensions.SerializableResponder.Respond(MvcExtensions.ResponderContext)">
            <summary>
            Responds the specified context.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:MvcExtensions.SerializableResponder.WriteTo(System.Object,System.IO.TextWriter)">
            <summary>
            Writes to response output.
            </summary>
            <param name="model">The model.</param>
            <param name="output">The output.</param>
        </member>
        <member name="P:MvcExtensions.SerializableResponder.ContentType">
            <summary>
            Gets or sets the type of the content.
            </summary>
            <value>The type of the content.</value>
        </member>
        <member name="M:MvcExtensions.JsonResponder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MvcExtensions.JsonResponder"/> class.
            </summary>
        </member>
        <member name="M:MvcExtensions.JsonResponder.WriteTo(System.Object,System.IO.TextWriter)">
            <summary>
            Writes to response output.
            </summary>
            <param name="model">The model.</param>
            <param name="output">The output.</param>
        </member>
        <member name="P:MvcExtensions.JsonResponder.SerializerFactory">
            <summary>
            Gets or sets the serializer factory.
            </summary>
            <value>The serializer factory.</value>
        </member>
        <member name="T:MvcExtensions.ModelStateError">
            <summary>
            Defines a class which is used to store model state errors for html responders.
            </summary>
        </member>
        <member name="M:MvcExtensions.ModelStateError.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MvcExtensions.ModelStateError"/> class.
            </summary>
        </member>
        <member name="P:MvcExtensions.ModelStateError.Key">
            <summary>
            Gets or sets the key.
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:MvcExtensions.ModelStateError.Messages">
            <summary>
            Gets or sets the messages.
            </summary>
            <value>The messages.</value>
        </member>
        <member name="T:MvcExtensions.ResponderCollection">
            <summary>
            Contains the supported responders
            </summary>
        </member>
        <member name="M:MvcExtensions.ResponderCollection.FindMatching(System.Web.Mvc.ControllerContext)">
            <summary>
            Finds the matching.
            </summary>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ResponderCollection.SetItem(System.Int32,MvcExtensions.IResponder)">
            <summary>
            Sets the item.
            </summary>
            <param name="index">The index.</param>
            <param name="item">The item.</param>
        </member>
        <member name="P:MvcExtensions.ResponderCollection.QueryStringFormatParameterName">
            <summary>
            Gets or sets the name of the query string format parameter.
            </summary>
            <value>The name of the query string format parameter.</value>
        </member>
        <member name="T:MvcExtensions.ResponderCollectionExtensions">
            <summary>
            Defines a static class which contains extension method of <see cref="T:MvcExtensions.ResponderCollection"/>.
            </summary>
        </member>
        <member name="M:MvcExtensions.ResponderCollectionExtensions.Get(MvcExtensions.ResponderCollection,System.String)">
            <summary>
            Gets the specified instance.
            </summary>
            <param name="instance">The instance.</param>
            <param name="format">The format.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ResponderCollectionExtensions.Get``1(MvcExtensions.ResponderCollection)">
            <summary>
            Gets the specified instance.
            </summary>
            <typeparam name="TResponder">The type of the responder.</typeparam>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ResponderCollectionExtensions.Include``1(MvcExtensions.ResponderCollection)">
            <summary>
            Includes the specified instance.
            </summary>
            <typeparam name="TResponder">The type of the responder.</typeparam>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ResponderCollectionExtensions.Include``1(MvcExtensions.ResponderCollection,System.Action{``0})">
            <summary>
            Includes the specified instance.
            </summary>
            <typeparam name="TResponder">The type of the responder.</typeparam>
            <param name="instance">The instance.</param>
            <param name="configure">The configure.</param>
            <returns></returns>
        </member>
        <member name="T:MvcExtensions.ResponderContext">
            <summary>
            The context object when responders are into action.
            </summary>
        </member>
        <member name="M:MvcExtensions.ResponderContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MvcExtensions.ResponderContext"/> class.
            </summary>
        </member>
        <member name="M:MvcExtensions.ResponderContext.#ctor(System.Web.Routing.RouteValueDictionary,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:MvcExtensions.ResponderContext"/> class.
            </summary>
            <param name="redirectRouteValues">The redirect route values.</param>
            <param name="flashMessages">The flash messages.</param>
        </member>
        <member name="P:MvcExtensions.ResponderContext.ControllerContext">
            <summary>
            Gets or sets the controller context.
            </summary>
            <value>The controller context.</value>
        </member>
        <member name="P:MvcExtensions.ResponderContext.Model">
            <summary>
            Gets or sets the model.
            </summary>
            <value>The model.</value>
        </member>
        <member name="P:MvcExtensions.ResponderContext.ViewName">
            <summary>
            Gets or sets the name of the view.
            </summary>
            <value>The name of the view.</value>
        </member>
        <member name="P:MvcExtensions.ResponderContext.MasterName">
            <summary>
            Gets or sets the name of the master.
            </summary>
            <value>The name of the master.</value>
        </member>
        <member name="P:MvcExtensions.ResponderContext.RedirectController">
            <summary>
            Gets or sets the redirect controller.
            </summary>
            <value>The redirect controller.</value>
        </member>
        <member name="P:MvcExtensions.ResponderContext.RedirectAction">
            <summary>
            Gets or sets the redirect action.
            </summary>
            <value>The redirect action.</value>
        </member>
        <member name="P:MvcExtensions.ResponderContext.RedirectRouteValues">
            <summary>
            Gets or sets the redirect route values.
            </summary>
            <value>The redirect route values.</value>
        </member>
        <member name="P:MvcExtensions.ResponderContext.FlashMessages">
            <summary>
            Gets or sets the flash messages.
            </summary>
            <value>The flash messages.</value>
        </member>
        <member name="T:MvcExtensions.XmlResponder">
            <summary>
            Defines a responder which returns xml.
            </summary>
        </member>
        <member name="M:MvcExtensions.XmlResponder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MvcExtensions.XmlResponder"/> class.
            </summary>
        </member>
        <member name="M:MvcExtensions.XmlResponder.WriteTo(System.Object,System.IO.TextWriter)">
            <summary>
            Writes to response output.
            </summary>
            <param name="model">The model.</param>
            <param name="output">The output.</param>
        </member>
        <member name="T:MvcExtensions.RESTFulActionConstraint">
            <summary>
            Defines a constraint which is used to ensure the RESTFul actions conditions are meet.
            </summary>
        </member>
        <member name="F:MvcExtensions.RESTFulActionConstraint.IdParameterName">
            <summary>
            The Default Id parameter
            </summary>
        </member>
        <member name="M:MvcExtensions.RESTFulActionConstraint.#ctor(System.Web.Mvc.HttpVerbs)">
            <summary>
            Initializes a new instance of the <see cref="T:MvcExtensions.RESTFulActionConstraint"/> class.
            </summary>
            <param name="httpVerb">The HTTP verb.</param>
        </member>
        <member name="M:MvcExtensions.RESTFulActionConstraint.#ctor(System.Web.Mvc.HttpVerbs,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MvcExtensions.RESTFulActionConstraint"/> class.
            </summary>
            <param name="httpVerb">The HTTP verb.</param>
            <param name="requiresId">if set to <c>true</c> [requires id].</param>
        </member>
        <member name="M:MvcExtensions.RESTFulActionConstraint.Match(System.Web.HttpContextBase,System.Web.Routing.Route,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Routing.RouteDirection)">
            <summary>
            Determines whether the URL parameter contains a valid value for this constraint.
            </summary>
            <param name="httpContext">An object that encapsulates information about the HTTP request.</param>
            <param name="route">The object that this constraint belongs to.</param>
            <param name="parameterName">The name of the parameter that is being checked.</param>
            <param name="values">An object that contains the parameters for the URL.</param>
            <param name="routeDirection">An object that indicates whether the constraint check is being performed when an incoming request is being handled or when a URL is being generated.</param>
            <returns>
            true if the URL parameter contains a valid value; otherwise, false.
            </returns>
        </member>
        <member name="M:MvcExtensions.RESTFulActionConstraint.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:MvcExtensions.RESTFulActionConstraint.HttpVerbs">
            <summary>
            Gets or sets the HTTP verbs.
            </summary>
            <value>The HTTP verbs.</value>
        </member>
        <member name="P:MvcExtensions.RESTFulActionConstraint.RequiresId">
            <summary>
            Gets or sets a value indicating whether [requires id].
            </summary>
            <value><c>true</c> if [requires id]; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:MvcExtensions.TypeMappingRegistry`2">
            <summary>
            Defines a base class which is used to hold the general type mapping.
            </summary>
            <typeparam name="TType1">The type of the type1.</typeparam>
            <typeparam name="TType2">The type of the type2.</typeparam>
        </member>
        <member name="M:MvcExtensions.TypeMappingRegistry`2.Register(System.Type,System.Type)">
            <summary>
            Registers the specified type1.
            </summary>
            <param name="type1">The type1.</param>
            <param name="type2">The type2.</param>
        </member>
        <member name="M:MvcExtensions.TypeMappingRegistry`2.IsRegistered(System.Type)">
            <summary>
            Determines whether the specified type is registered.
            </summary>
            <param name="type">The type.</param>
            <returns>
            <c>true</c> if the specified type is registered; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MvcExtensions.TypeMappingRegistry`2.Matching(System.Type)">
            <summary>
            Returns the matched type.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="P:MvcExtensions.TypeMappingRegistry`2.Mappings">
            <summary>
            Gets the mappings.
            </summary>
            <value>The mappings.</value>
        </member>
        <member name="T:MvcExtensions.ActionInvokerMappingExtensions">
            <summary>
            Defines an static class which contains extension methods of <see cref="T:MvcExtensions.TypeMappingRegistry`2"/>.
            </summary>
        </member>
        <member name="M:MvcExtensions.ActionInvokerMappingExtensions.Register``2(MvcExtensions.TypeMappingRegistry{System.Web.Mvc.Controller,System.Web.Mvc.IActionInvoker})">
            <summary>
            Registers the specified instance.
            </summary>
            <typeparam name="TController">The type of the controller.</typeparam>
            <typeparam name="TActionInvoker">The type of the action invoker.</typeparam>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ActionInvokerMappingExtensions.Register``3(MvcExtensions.TypeMappingRegistry{System.Web.Mvc.Controller,System.Web.Mvc.IActionInvoker})">
            <summary>
            Registers the specified instance.
            </summary>
            <typeparam name="TController1">The type of the controller1.</typeparam>
            <typeparam name="TController2">The type of the controller2.</typeparam>
            <typeparam name="TActionInvoker">The type of the action invoker.</typeparam>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ActionInvokerMappingExtensions.Register``4(MvcExtensions.TypeMappingRegistry{System.Web.Mvc.Controller,System.Web.Mvc.IActionInvoker})">
            <summary>
            Registers the specified instance.
            </summary>
            <typeparam name="TController1">The type of the controller1.</typeparam>
            <typeparam name="TController2">The type of the controller2.</typeparam>
            <typeparam name="TController3">The type of the controller3.</typeparam>
            <typeparam name="TActionInvoker">The type of the action invoker.</typeparam>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ActionInvokerMappingExtensions.Register``5(MvcExtensions.TypeMappingRegistry{System.Web.Mvc.Controller,System.Web.Mvc.IActionInvoker})">
            <summary>
            Registers the specified instance.
            </summary>
            <typeparam name="TController1">The type of the controller1.</typeparam>
            <typeparam name="TController2">The type of the controller2.</typeparam>
            <typeparam name="TController3">The type of the controller3.</typeparam>
            <typeparam name="TController4">The type of the controller4.</typeparam>
            <typeparam name="TActionInvoker">The type of the action invoker.</typeparam>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ActionInvokerMappingExtensions.Register``1(MvcExtensions.TypeMappingRegistry{System.Web.Mvc.Controller,System.Web.Mvc.IActionInvoker},MvcExtensions.TypeCatalog)">
            <summary>
            Registers the specified instance.
            </summary>
            <typeparam name="TActionInvoker">The type of the action invoker.</typeparam>
            <param name="instance">The instance.</param>
            <param name="typeCatalog">The type catalog.</param>
            <returns></returns>
        </member>
        <member name="T:MvcExtensions.ExtendedAsyncControllerActionInvoker">
            <summary>
            The default async <seealso cref="T:System.Web.Mvc.IActionInvoker"/> which supports the fluent filter registration and dependency injection.
            </summary>
        </member>
        <member name="M:MvcExtensions.ExtendedAsyncControllerActionInvoker.#ctor(MvcExtensions.ContainerAdapter)">
            <summary>
            Initializes a new instance of the <see cref="T:MvcExtensions.ExtendedAsyncControllerActionInvoker"/> class.
            </summary>
            <param name="container">The container.</param>
        </member>
        <member name="M:MvcExtensions.ExtendedAsyncControllerActionInvoker.GetFilters(System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor)">
            <summary>
            Retrieves information about the action filters.
            </summary>
            <param name="controllerContext">The controller context.</param>
            <param name="actionDescriptor">The action descriptor.</param>
            <returns>Information about the action filters.</returns>
        </member>
        <member name="P:MvcExtensions.ExtendedAsyncControllerActionInvoker.Container">
            <summary>
            Gets the container.
            </summary>
            <value>The container.</value>
        </member>
        <member name="T:MvcExtensions.ExtendedControllerActivator">
            <summary>
            The Default IoC backed <seealso cref="T:System.Web.Mvc.IControllerActivator"/>.
            </summary>
        </member>
        <member name="M:MvcExtensions.ExtendedControllerActivator.#ctor(MvcExtensions.ContainerAdapter,MvcExtensions.TypeMappingRegistry{System.Web.Mvc.Controller,System.Web.Mvc.IControllerActivator},MvcExtensions.TypeMappingRegistry{System.Web.Mvc.Controller,System.Web.Mvc.IActionInvoker})">
            <summary>
            Initializes a new instance of the <see cref="T:MvcExtensions.ExtendedControllerActivator"/> class.
            </summary>
            <param name="container">The container.</param>
            <param name="controllerActivatorRegistry">The controller activator registry.</param>
            <param name="actionInvokerRegistry">The action invoker registry.</param>
        </member>
        <member name="M:MvcExtensions.ExtendedControllerActivator.Create(System.Web.Routing.RequestContext,System.Type)">
            <summary>
            Creates the specified request context.
            </summary>
            <param name="requestContext">The request context.</param>
            <param name="controllerType">Type of the controller.</param>
            <returns></returns>
        </member>
        <member name="P:MvcExtensions.ExtendedControllerActivator.Container">
            <summary>
            Gets the container.
            </summary>
            <value>The container.</value>
        </member>
        <member name="P:MvcExtensions.ExtendedControllerActivator.ControllerActivatorRegistry">
            <summary>
            Gets or sets the controller activator registry.
            </summary>
            <value>The controller activator registry.</value>
        </member>
        <member name="P:MvcExtensions.ExtendedControllerActivator.ActionInvokerRegistry">
            <summary>
            Gets the action invoker registry.
            </summary>
            <value>The action invoker registry.</value>
        </member>
        <member name="T:MvcExtensions.HttpContextBaseExtensions">
            <summary>
            Defines an static class which contains extension methods of <see cref="T:System.Web.HttpContextBase"/>.
            </summary>
        </member>
        <member name="M:MvcExtensions.HttpContextBaseExtensions.Compress(System.Web.HttpContextBase)">
            <summary>
            Compresses the specified instance.
            </summary>
            <param name="instance">The instance.</param>
        </member>
        <member name="M:MvcExtensions.HttpContextBaseExtensions.Cache(System.Web.HttpContextBase,System.TimeSpan)">
            <summary>
            Caches the specified instance.
            </summary>
            <param name="instance">The instance.</param>
            <param name="duration">The duration.</param>
        </member>
        <member name="T:MvcExtensions.QValueSorter">
            <summary>
            A helper class to sort QValue.
            </summary>
        </member>
        <member name="M:MvcExtensions.QValueSorter.Sort(System.String)">
            <summary>
            Sorts the specified types.
            </summary>
            <param name="types">The types.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.QValueSorter.Sort(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Sorts the specified types.
            </summary>
            <param name="types">The types.</param>
            <param name="defective">if set to <c>true</c> [defective].</param>
            <returns></returns>
        </member>
        <member name="T:MvcExtensions.AdaptivePostRedirectGetResult">
            <summary>
            Defines an class which is used to redirect adaptively in PRG scenario. If the request is ajax it writes the viewdata in json string; otherwise
            it redirects to the given url. 
            </summary>
        </member>
        <member name="M:MvcExtensions.AdaptivePostRedirectGetResult.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MvcExtensions.AdaptivePostRedirectGetResult"/> class.
            </summary>
            <param name="url">The target URL.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="url"/> parameter is null.</exception>
        </member>
        <member name="M:MvcExtensions.AdaptivePostRedirectGetResult.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Web.Script.Serialization.JavaScriptConverter})">
            <summary>
            Initializes a new instance of the <see cref="T:MvcExtensions.AdaptivePostRedirectGetResult"/> class.
            </summary>
            <param name="url">The URL.</param>
            <param name="jsonConverters">The json converters.</param>
        </member>
        <member name="M:MvcExtensions.AdaptivePostRedirectGetResult.ExecuteResult(System.Web.Mvc.ControllerContext)">
            <summary>
            Enables processing of the result of an action method by a custom type that inherits from the <see cref="T:System.Web.Mvc.ActionResult"/> class.
            </summary>
            <param name="context">The context within which the result is executed.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="context"/> parameter is null.</exception>
        </member>
        <member name="P:MvcExtensions.AdaptivePostRedirectGetResult.JsonConverters">
            <summary>
            Gets the json converters.
            </summary>
            <value>The json converters.</value>
        </member>
        <member name="T:MvcExtensions.AdaptiveViewResult">
            <summary>
            Defines an class which is used to render a view adaptively. If the request is ajax it writes the viewdata in json string; otherwise
            it  renders the specified view. 
            </summary>
        </member>
        <member name="M:MvcExtensions.AdaptiveViewResult.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MvcExtensions.AdaptiveViewResult"/> class.
            </summary>
        </member>
        <member name="M:MvcExtensions.AdaptiveViewResult.#ctor(System.Collections.Generic.IEnumerable{System.Web.Script.Serialization.JavaScriptConverter})">
            <summary>
            Initializes a new instance of the <see cref="T:MvcExtensions.AdaptiveViewResult"/> class.
            </summary>
            <param name="jsonConverters">The json converters.</param>
        </member>
        <member name="M:MvcExtensions.AdaptiveViewResult.ExecuteResult(System.Web.Mvc.ControllerContext)">
            <summary>
            When called by the action invoker, renders the view to the response.
            </summary>
            <param name="context">The context that the result is executed in.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="context"/> parameter is null.</exception>
        </member>
        <member name="P:MvcExtensions.AdaptiveViewResult.JsonConverters">
            <summary>
            Gets the json converters.
            </summary>
            <value>The json converters.</value>
        </member>
        <member name="T:MvcExtensions.RegisterControllers">
            <summary>
            Defines a class which is used to register available <seealso cref="T:System.Web.Mvc.Controller"/>.
            </summary>
        </member>
        <member name="M:MvcExtensions.RegisterControllers.#ctor(MvcExtensions.ContainerAdapter)">
            <summary>
            Initializes a new instance of the <see cref="T:MvcExtensions.RegisterControllers"/> class.
            </summary>
            <param name="container">The container.</param>
        </member>
        <member name="M:MvcExtensions.RegisterControllers.Execute">
            <summary>
            Executes the task. Returns continuation of the next task(s) in the chain.
            </summary>
            <returns></returns>
        </member>
        <member name="P:MvcExtensions.RegisterControllers.Container">
            <summary>
            Gets the container.
            </summary>
            <value>The container.</value>
        </member>
        <member name="T:MvcExtensions.HttpResponseBaseExtensions">
            <summary>
            Defines an static class which contains extension methods of <see cref="T:System.Web.HttpResponseBase"/>.
            </summary>
        </member>
        <member name="M:MvcExtensions.HttpResponseBaseExtensions.WriteJson(System.Web.HttpResponseBase,System.String)">
            <summary>
            Writes the json.
            </summary>
            <param name="instance">The instance.</param>
            <param name="json">The json.</param>
        </member>
        <member name="T:MvcExtensions.ObjectExtensions">
            <summary>
            Defines an static class which contains extension methods of <see cref="T:System.Object"/>.
            </summary>
        </member>
        <member name="M:MvcExtensions.ObjectExtensions.ToJson(System.Object)">
            <summary>
            Convert the given object into json string.
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ObjectExtensions.ToJson(System.Object,System.Collections.Generic.IEnumerable{System.Web.Script.Serialization.JavaScriptConverter})">
            <summary>
            Convert the given object into json string.
            </summary>
            <param name="instance">The instance.</param>
            <param name="jsonConverters">The json converters.</param>
            <returns></returns>
        </member>
        <member name="T:MvcExtensions.ViewDataDictionaryExtensions">
            <summary>
            Defines an static class which contains extension methods of <see cref="T:System.Web.Mvc.ViewDataDictionary"/>.
            </summary>
        </member>
        <member name="M:MvcExtensions.ViewDataDictionaryExtensions.Get``1(System.Web.Mvc.ViewDataDictionary)">
            <summary>
            Gets the value against the specified type name.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ViewDataDictionaryExtensions.Get``1(System.Web.Mvc.ViewDataDictionary,System.String)">
            <summary>
            Gets the value that is stored against the specified key.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="instance">The instance.</param>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ViewDataDictionaryExtensions.Get``1(System.Web.Mvc.ViewDataDictionary,System.String,``0)">
            <summary>
            Gets the value that is stored against the specified key, if the key does not exists it will return the provided default value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="instance">The instance.</param>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ViewDataDictionaryExtensions.Set``1(System.Web.Mvc.ViewDataDictionary,``0)">
            <summary>
            Sets the value against the specified type.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="instance">The instance.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:MvcExtensions.ViewDataDictionaryExtensions.Set``1(System.Web.Mvc.ViewDataDictionary,System.String,``0)">
            <summary>
            Sets the value against the specified key.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="instance">The instance.</param>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:MvcExtensions.ViewDataDictionaryExtensions.Contains``1(System.Web.Mvc.ViewDataDictionary)">
            <summary>
            Determines whether  the specified type exists.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="instance">The instance.</param>
            <returns>
            <c>true</c> if [contains] [the specified instance]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MvcExtensions.ViewDataDictionaryExtensions.Remove``1(System.Web.Mvc.ViewDataDictionary)">
            <summary>
            Removes the specified type.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="instance">The instance.</param>
        </member>
        <member name="M:MvcExtensions.ViewDataDictionaryExtensions.ToJson(System.Web.Mvc.ViewDataDictionary)">
            <summary>
            Convert the view data into json string.
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ViewDataDictionaryExtensions.ToJson(System.Web.Mvc.ViewDataDictionary,System.Collections.Generic.IEnumerable{System.Web.Script.Serialization.JavaScriptConverter})">
            <summary>
            Convert the view data into json string.
            </summary>
            <param name="instance">The instance.</param>
            <param name="jsonConverters">The json converters.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ViewDataDictionaryExtensions.AsSerializable(System.Web.Mvc.ViewDataDictionary)">
            <summary>
            Convert the view data into a serializable object.
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="T:MvcExtensions.ContainerAdapter">
            <summary>
            Defines a base class which acts as an adapter for IoC Container.
            </summary>
        </member>
        <member name="T:MvcExtensions.ExtendedDependencyResolver">
            <summary>
            This class is a helper that provides a default implementation
            for most of the methods of <see cref="T:System.Web.Mvc.IDependencyResolver"/>.
            </summary>
        </member>
        <member name="M:MvcExtensions.ExtendedDependencyResolver.GetService(System.Type)">
            <summary>
            Implementation of <see cref="M:System.IServiceProvider.GetService(System.Type)"/>.
            </summary>
            <param name="serviceType">The requested service.</param>
            <returns>The requested object.</returns>
        </member>
        <member name="M:MvcExtensions.ExtendedDependencyResolver.GetService(System.Type,System.String)">
            <summary>
            Gets the service.
            </summary>
            <param name="serviceType">Type of the service.</param>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ExtendedDependencyResolver.GetServices(System.Type)">
            <summary>
            Gets the services.
            </summary>
            <param name="serviceType">Type of the service.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ExtendedDependencyResolver.DoGetService(System.Type,System.String)">
            <summary>
            Gets the service.
            </summary>
            <param name="serviceType">Type of the service.</param>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ExtendedDependencyResolver.DoGetServices(System.Type)">
            <summary>
            Gets the services.
            </summary>
            <param name="serviceType">Type of the service.</param>
            <returns></returns>
        </member>
        <member name="T:MvcExtensions.IServiceRegistrar">
            <summary>
            Represents an interface which is used to register services.
            </summary>
        </member>
        <member name="M:MvcExtensions.IServiceRegistrar.RegisterType(System.String,System.Type,System.Type,MvcExtensions.LifetimeType)">
            <summary>
            Registers the service and its implementation with the lifetime behavior.
            </summary>
            <param name="key">The key.</param>
            <param name="serviceType">Type of the service.</param>
            <param name="implementationType">Type of the implementation.</param>
            <param name="lifetime">The lifetime of the service.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.IServiceRegistrar.RegisterInstance(System.String,System.Type,System.Object)">
            <summary>
            Registers the instance as singleton.
            </summary>
            <param name="key">The key.</param>
            <param name="serviceType">Type of the service.</param>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="T:MvcExtensions.IServiceInjector">
            <summary>
            Represents an interface which is used to inject dependencies for a given object.
            </summary>
        </member>
        <member name="M:MvcExtensions.IServiceInjector.Inject(System.Object)">
            <summary>
            Injects the matching dependences.
            </summary>
            <param name="instance">The instance.</param>
        </member>
        <member name="M:MvcExtensions.ContainerAdapter.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:MvcExtensions.ContainerAdapter"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:MvcExtensions.ContainerAdapter.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:MvcExtensions.ContainerAdapter.RegisterType(System.String,System.Type,System.Type,MvcExtensions.LifetimeType)">
            <summary>
            Registers the service and its implementation with the lifetime behavior.
            </summary>
            <param name="key">The key.</param>
            <param name="serviceType">Type of the service.</param>
            <param name="implementationType">Type of the implementation.</param>
            <param name="lifetime">The lifetime of the service.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ContainerAdapter.RegisterInstance(System.String,System.Type,System.Object)">
            <summary>
            Registers the instance as singleton.
            </summary>
            <param name="key">The key.</param>
            <param name="serviceType">Type of the service.</param>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ContainerAdapter.Inject(System.Object)">
            <summary>
            Injects the matching dependences.
            </summary>
            <param name="instance">The instance.</param>
        </member>
        <member name="M:MvcExtensions.ContainerAdapter.DisposeCore">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
        </member>
        <member name="T:MvcExtensions.ExtendedDependencyResolverExtensions">
            <summary>
            Defines an static class which contains extension methods of <see cref="T:MvcExtensions.ExtendedDependencyResolver"/>.
            </summary>
        </member>
        <member name="M:MvcExtensions.ExtendedDependencyResolverExtensions.GetService``1(MvcExtensions.ExtendedDependencyResolver,System.String)">
            <summary>
            Gets the service.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <param name="instance">The instance.</param>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="T:MvcExtensions.LifetimeType">
            <summary>
            Represents an enum which defines the life time of the registered service.
            </summary>
        </member>
        <member name="F:MvcExtensions.LifetimeType.PerRequest">
            <summary>
            The same object will be returned for the same request.
            </summary>
        </member>
        <member name="F:MvcExtensions.LifetimeType.Singleton">
            <summary>
            This object will be created only once and the same object will be returned each time it is requested.
            </summary>
        </member>
        <member name="F:MvcExtensions.LifetimeType.Transient">
            <summary>
            The object will be created every time it is requested.
            </summary>
        </member>
        <member name="T:MvcExtensions.ServiceRegistrarExtensions">
            <summary>
            Defines an static class which contains extension methods of <see cref="T:MvcExtensions.IServiceRegistrar"/>.
            </summary>
        </member>
        <member name="M:MvcExtensions.ServiceRegistrarExtensions.RegisterInstance``1(MvcExtensions.IServiceRegistrar,System.Object)">
            <summary>
            Registers the instance as a singleton service.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <param name="instance">The instance.</param>
            <param name="service">The service.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ServiceRegistrarExtensions.RegisterInstance(MvcExtensions.IServiceRegistrar,System.Object)">
            <summary>
            Registers the instance as a singleton service of the instance type.
            </summary>
            <param name="instance">The instance.</param>
            <param name="service">The service.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ServiceRegistrarExtensions.RegisterAsPerRequest``1(MvcExtensions.IServiceRegistrar)">
            <summary>
            Registers the service as per request.
            </summary>
            <typeparam name="TImplementation">The type of the implementation.</typeparam>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ServiceRegistrarExtensions.RegisterAsPerRequest``2(MvcExtensions.IServiceRegistrar)">
            <summary>
            Registers as per request.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <typeparam name="TImplementation">The type of the implementation.</typeparam>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ServiceRegistrarExtensions.RegisterAsPerRequest(MvcExtensions.IServiceRegistrar,System.Type)">
            <summary>
            Registers the service as per request.
            </summary>
            <param name="instance">The instance.</param>
            <param name="implementationType">Type of the implementation.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ServiceRegistrarExtensions.RegisterAsPerRequest(MvcExtensions.IServiceRegistrar,System.Type,System.Type)">
            <summary>
            Registers the service as per request.
            </summary>
            <param name="instance">The instance.</param>
            <param name="serviceType">Type of the service.</param>
            <param name="implementationType">Type of the implementation.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ServiceRegistrarExtensions.RegisterAsSingleton``1(MvcExtensions.IServiceRegistrar)">
            <summary>
            Registers the service as singleton.
            </summary>
            <typeparam name="TImplementation">The type of the implementation.</typeparam>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ServiceRegistrarExtensions.RegisterAsSingleton``2(MvcExtensions.IServiceRegistrar)">
            <summary>
            Registers as singleton.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <typeparam name="TImplementation">The type of the implementation.</typeparam>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ServiceRegistrarExtensions.RegisterAsSingleton(MvcExtensions.IServiceRegistrar,System.Type)">
            <summary>
            Registers the service as singleton.
            </summary>
            <param name="instance">The instance.</param>
            <param name="implementationType">Type of the implementation.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ServiceRegistrarExtensions.RegisterAsSingleton(MvcExtensions.IServiceRegistrar,System.Type,System.Type)">
            <summary>
            Registers the service as singleton.
            </summary>
            <param name="instance">The instance.</param>
            <param name="serviceType">Type of the service.</param>
            <param name="implementationType">Type of the implementation.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ServiceRegistrarExtensions.RegisterAsTransient``1(MvcExtensions.IServiceRegistrar)">
            <summary>
            Registers the service as transient.
            </summary>
            <typeparam name="TImplementation">The type of the implementation.</typeparam>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ServiceRegistrarExtensions.RegisterAsTransient``2(MvcExtensions.IServiceRegistrar)">
            <summary>
            Registers the service as transient.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <typeparam name="TImplementation">The type of the implementation.</typeparam>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ServiceRegistrarExtensions.RegisterAsTransient(MvcExtensions.IServiceRegistrar,System.Type)">
            <summary>
            Registers the service as transient.
            </summary>
            <param name="instance">The instance.</param>
            <param name="implementationType">Type of the implementation.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ServiceRegistrarExtensions.RegisterAsTransient(MvcExtensions.IServiceRegistrar,System.Type,System.Type)">
            <summary>
            Registers the service as transient.
            </summary>
            <param name="instance">The instance.</param>
            <param name="serviceType">Type of the service.</param>
            <param name="implementationType">Type of the implementation.</param>
            <returns></returns>
        </member>
        <member name="T:MvcExtensions.BuildManagerWrapper">
            <summary>
            Defines a wrapper class which provides access to the internal <seealso cref="T:System.Web.Compilation.BuildManager"/>.
            </summary>
        </member>
        <member name="T:MvcExtensions.IBuildManager">
            <summary>
            Represents an interface which provides access to all the referenced assemblies.
            </summary>
        </member>
        <member name="P:MvcExtensions.IBuildManager.Assemblies">
            <summary>
            Gets the available assemblies.
            </summary>
            <value>The assemblies.</value>
        </member>
        <member name="P:MvcExtensions.IBuildManager.PublicTypes">
            <summary>
            Gets the available public types of <see cref="P:MvcExtensions.IBuildManager.Assemblies"/>.
            </summary>
            <value>The concrete types.</value>
        </member>
        <member name="P:MvcExtensions.IBuildManager.ConcreteTypes">
            <summary>
            Gets the available concrete types of <see cref="P:MvcExtensions.IBuildManager.Assemblies"/>.
            </summary>
            <value>The concrete types.</value>
        </member>
        <member name="P:MvcExtensions.BuildManagerWrapper.Current">
            <summary>
            Gets the singleton instance.
            </summary>
            <value>The current.</value>
        </member>
        <member name="P:MvcExtensions.BuildManagerWrapper.Assemblies">
            <summary>
            Gets the assemblies.
            </summary>
            <value>The assemblies.</value>
        </member>
        <member name="P:MvcExtensions.BuildManagerWrapper.PublicTypes">
            <summary>
            Gets the available public types of <see cref="P:MvcExtensions.BuildManagerWrapper.Assemblies"/>.
            </summary>
            <value>The concrete types.</value>
        </member>
        <member name="P:MvcExtensions.BuildManagerWrapper.ConcreteTypes">
            <summary>
            Gets the available concrete types of <see cref="P:MvcExtensions.BuildManagerWrapper.Assemblies"/>.
            </summary>
            <value>The concrete types.</value>
        </member>
        <member name="T:MvcExtensions.CompositeModelValidatorProvider">
            <summary>
            Defines a class which is used to maintain multiple model validator provider.
            </summary>
        </member>
        <member name="M:MvcExtensions.CompositeModelValidatorProvider.#ctor(System.Web.Mvc.ModelValidatorProvider[])">
            <summary>
            Initializes a new instance of the <see cref="T:MvcExtensions.CompositeModelValidatorProvider"/> class.
            </summary>
            <param name="providers">The providers.</param>
        </member>
        <member name="M:MvcExtensions.CompositeModelValidatorProvider.GetValidators(System.Web.Mvc.ModelMetadata,System.Web.Mvc.ControllerContext)">
            <summary>
            Gets a list of validators.
            </summary>
            <param name="metadata">The metadata.</param>
            <param name="context">The context.</param>
            <returns>A list of validators.</returns>
        </member>
        <member name="P:MvcExtensions.CompositeModelValidatorProvider.Providers">
            <summary>
            Gets the providers.
            </summary>
            <value>The providers.</value>
        </member>
        <member name="T:MvcExtensions.PerRequestTasksRegistry">
            <summary>
            Defines a Registry class which holds the list of the task that would be executed when bootstrapping the application.
            </summary>
        </member>
        <member name="T:MvcExtensions.IPerRequestTasksRegistry">
            <summary>
            Defines a interface which is used to hold the list of the task that would be executed when for each request.
            </summary>
        </member>
        <member name="M:MvcExtensions.IPerRequestTasksRegistry.Include``1">
            <summary>
            Includes this instance.
            </summary>
            <typeparam name="TTask">The type of the task.</typeparam>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.IPerRequestTasksRegistry.Include``1(System.Action{``0})">
            <summary>
            Includes the specified configure.
            </summary>
            <typeparam name="TTask">The type of the task.</typeparam>
            <param name="configure">The configure.</param>
            <returns></returns>
        </member>
        <member name="P:MvcExtensions.IPerRequestTasksRegistry.TaskConfigurations">
            <summary>
            Gets or sets the task configurations.
            </summary>
            <value>The tasks.</value>
        </member>
        <member name="M:MvcExtensions.PerRequestTasksRegistry.Include``1">
            <summary>
            Includes the specified task.
            </summary>
            <typeparam name="TTask">The type of the task.</typeparam>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.PerRequestTasksRegistry.Include``1(System.Action{``0})">
            <summary>
            Includes the task and also configure it.
            </summary>
            <typeparam name="TTask">The type of the task.</typeparam>
            <param name="configure">The configure.</param>
            <returns></returns>
        </member>
        <member name="P:MvcExtensions.PerRequestTasksRegistry.Current">
            <summary>
            Gets the singleton instance.
            </summary>
            <value>The instance.</value>
        </member>
        <member name="P:MvcExtensions.PerRequestTasksRegistry.TaskConfigurations">
            <summary>
            Gets or sets the tasks.
            </summary>
            <value>The tasks.</value>
        </member>
        <member name="T:MvcExtensions.EnumConstraint`1">
            <summary>
            Defines a class which is used to ensure the URL parameter value is  a matching enum value.
            </summary>
            <typeparam name="TEnum">The type of the enum.</typeparam>
        </member>
        <member name="M:MvcExtensions.EnumConstraint`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MvcExtensions.EnumConstraint`1"/> class.
            </summary>
        </member>
        <member name="M:MvcExtensions.EnumConstraint`1.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MvcExtensions.EnumConstraint`1"/> class.
            </summary>
            <param name="optional">if set to <c>true</c> [optional].</param>
        </member>
        <member name="M:MvcExtensions.EnumConstraint`1.Match(System.Web.HttpContextBase,System.Web.Routing.Route,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Routing.RouteDirection)">
            <summary>
            Matches the specified HTTP context.
            </summary>
            <param name="httpContext">The HTTP context.</param>
            <param name="route">The route.</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="values">The values.</param>
            <param name="routeDirection">The route direction.</param>
            <returns></returns>
        </member>
        <member name="T:MvcExtensions.GuidConstraint">
            <summary>
            Defines a class which is used to ensure the URL parameter value is <seealso cref="T:System.Guid"/>.
            </summary>
        </member>
        <member name="M:MvcExtensions.GuidConstraint.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MvcExtensions.GuidConstraint"/> class.
            </summary>
        </member>
        <member name="M:MvcExtensions.GuidConstraint.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MvcExtensions.GuidConstraint"/> class.
            </summary>
            <param name="optional">if set to <c>true</c> [optional].</param>
        </member>
        <member name="M:MvcExtensions.GuidConstraint.Match(System.Web.HttpContextBase,System.Web.Routing.Route,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Routing.RouteDirection)">
            <summary>
            Matches the specified HTTP context.
            </summary>
            <param name="httpContext">The HTTP context.</param>
            <param name="route">The route.</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="values">The values.</param>
            <param name="routeDirection">The route direction.</param>
            <returns></returns>
        </member>
        <member name="T:MvcExtensions.PositiveIntegerConstraint">
            <summary>
            Defines a class which is used to ensure the URL parameter value is  a positive <seealso cref="T:System.Int32"/>.
            </summary>
        </member>
        <member name="T:MvcExtensions.RangeConstraint`1">
            <summary>
            Defines a class which is used to ensure the URL parameter value is  between the specified range.
            </summary>
        </member>
        <member name="M:MvcExtensions.RangeConstraint`1.#ctor(`0,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:MvcExtensions.RangeConstraint`1"/> class.
            </summary>
            <param name="min">The min.</param>
            <param name="max">The max.</param>
        </member>
        <member name="M:MvcExtensions.RangeConstraint`1.#ctor(`0,`0,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MvcExtensions.RangeConstraint`1"/> class.
            </summary>
            <param name="min">The min.</param>
            <param name="max">The max.</param>
            <param name="optional">if set to <c>true</c> [optional].</param>
        </member>
        <member name="M:MvcExtensions.RangeConstraint`1.Match(System.Web.HttpContextBase,System.Web.Routing.Route,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Routing.RouteDirection)">
            <summary>
            Matches the specified HTTP context.
            </summary>
            <param name="httpContext">The HTTP context.</param>
            <param name="route">The route.</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="values">The values.</param>
            <param name="routeDirection">The route direction.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.PositiveIntegerConstraint.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MvcExtensions.PositiveIntegerConstraint"/> class.
            </summary>
        </member>
        <member name="M:MvcExtensions.PositiveIntegerConstraint.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MvcExtensions.PositiveIntegerConstraint"/> class.
            </summary>
            <param name="optional">if set to <c>true</c> [optional].</param>
        </member>
        <member name="T:MvcExtensions.PositiveLongConstraint">
            <summary>
            Defines a class which is used to ensure the URL parameter value is  a positive <seealso cref="T:System.Int64"/>.
            </summary>
        </member>
        <member name="M:MvcExtensions.PositiveLongConstraint.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MvcExtensions.PositiveLongConstraint"/> class.
            </summary>
        </member>
        <member name="M:MvcExtensions.PositiveLongConstraint.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MvcExtensions.PositiveIntegerConstraint"/> class.
            </summary>
            <param name="optional">if set to <c>true</c> [optional].</param>
        </member>
        <member name="T:MvcExtensions.RegexConstraint">
            <summary>
            Defines a class which is used to ensure the URL parameter value must match the provided expression.
            </summary>
        </member>
        <member name="M:MvcExtensions.RegexConstraint.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MvcExtensions.RegexConstraint"/> class.
            </summary>
            <param name="expression">The expression.</param>
        </member>
        <member name="M:MvcExtensions.RegexConstraint.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MvcExtensions.RegexConstraint"/> class.
            </summary>
            <param name="expression">The expression.</param>
            <param name="optional">if set to <c>true</c> [optional].</param>
        </member>
        <member name="M:MvcExtensions.RegexConstraint.Match(System.Web.HttpContextBase,System.Web.Routing.Route,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Routing.RouteDirection)">
            <summary>
            Matches the specified HTTP context.
            </summary>
            <param name="httpContext">The HTTP context.</param>
            <param name="route">The route.</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="values">The values.</param>
            <param name="routeDirection">The route direction.</param>
            <returns></returns>
        </member>
        <member name="T:MvcExtensions.TypeCatalog">
            <summary>
            Defines a class that is used to filter types for one or more assemblies.
            </summary>
        </member>
        <member name="M:MvcExtensions.TypeCatalog.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MvcExtensions.TypeCatalog"/> class.
            </summary>
        </member>
        <member name="M:MvcExtensions.TypeCatalog.#ctor(System.Collections.Generic.IList{System.Reflection.Assembly},System.Collections.Generic.IList{System.Predicate{System.Type}},System.Collections.Generic.IList{System.Predicate{System.Type}})">
            <summary>
            Initializes a new instance of the <see cref="T:MvcExtensions.TypeCatalog"/> class.
            </summary>
            <param name="assemblies">The assemblies.</param>
            <param name="includeFilters">The include filters.</param>
            <param name="excludeFilters">The exclude filters.</param>
        </member>
        <member name="M:MvcExtensions.TypeCatalog.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:MvcExtensions.TypeCatalog.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:MvcExtensions.TypeCatalog.Assemblies">
            <summary>
            Gets the assemblies.
            </summary>
            <value>The assemblies.</value>
        </member>
        <member name="P:MvcExtensions.TypeCatalog.IncludeFilters">
            <summary>
            Gets the include type filters.
            </summary>
            <value>The include filters.</value>
        </member>
        <member name="P:MvcExtensions.TypeCatalog.ExcludeFilters">
            <summary>
            Gets the exclude type filters.
            </summary>
            <value>The exclude filters.</value>
        </member>
        <member name="T:MvcExtensions.TypeCatalogBuilder">
            <summary>
            Defines a class to fluently build <seealso cref="P:MvcExtensions.TypeCatalogBuilder.TypeCatalog"/>.
            </summary>
        </member>
        <member name="M:MvcExtensions.TypeCatalogBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MvcExtensions.TypeCatalogBuilder"/> class.
            </summary>
        </member>
        <member name="M:MvcExtensions.TypeCatalogBuilder.#ctor(MvcExtensions.TypeCatalog)">
            <summary>
            Initializes a new instance of the <see cref="T:MvcExtensions.TypeCatalogBuilder"/> class.
            </summary>
            <param name="typeCatalog">The type catalog.</param>
        </member>
        <member name="M:MvcExtensions.TypeCatalogBuilder.op_Implicit(MvcExtensions.TypeCatalogBuilder)~MvcExtensions.TypeCatalog">
            <summary>
            Performs an implicit conversion from <see cref="T:MvcExtensions.TypeCatalogBuilder"/> to <see cref="T:MvcExtensions.TypeCatalog"/>.
            </summary>
            <param name="builder">The builder.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:MvcExtensions.TypeCatalogBuilder.Add(System.Reflection.Assembly[])">
            <summary>
            Adds the specified assemblies.
            </summary>
            <param name="assemblies">The assemblies.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.TypeCatalogBuilder.Add(System.String[])">
            <summary>
            Adds the specified assemblies that matches the specified names. This method comes into action when the assembly is available in the application but does not have any direct reference.
            </summary>
            <param name="assemblyNames">The assembly names.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.TypeCatalogBuilder.Include(System.Type[])">
            <summary>
            Includes the specified types.
            </summary>
            <param name="types">The types.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.TypeCatalogBuilder.Include(System.String[])">
            <summary>
            Includes the types that matches specified names. This method comes into action when the type is available in the application but does not have any direct reference.
            </summary>
            <param name="typeNames">The type names.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.TypeCatalogBuilder.Include(System.Predicate{System.Type})">
            <summary>
            Includes the types that matches specified filter.
            </summary>
            <param name="filter">The filter.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.TypeCatalogBuilder.Exclude(System.Type[])">
            <summary>
            Excludes the specified types.
            </summary>
            <param name="types">The types.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.TypeCatalogBuilder.Exclude(System.String[])">
            <summary>
            Excludes the types that matches specified names. This method comes into action when the type is available in the application but does not have any direct reference.
            </summary>
            <param name="typeNames">The type names.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.TypeCatalogBuilder.Exclude(System.Predicate{System.Type})">
            <summary>
            Excludes the types that matches specified filter.
            </summary>
            <param name="filter">The filter.</param>
            <returns></returns>
        </member>
        <member name="P:MvcExtensions.TypeCatalogBuilder.TypeCatalog">
            <summary>
            Gets the internal type catalog.
            </summary>
            <value>The type catalog.</value>
        </member>
        <member name="T:MvcExtensions.PerRequestTask">
            <summary>
            Defines a base class which is executed for each request. This is similar to <seealso cref="T:System.Web.IHttpModule"/> with only begin and end support.
            </summary>
        </member>
        <member name="T:MvcExtensions.FilterRegistryExtensions">
            <summary>
            Defines an static class which contains extension methods of <see cref="T:MvcExtensions.IFilterRegistry"/>.
            </summary>
        </member>
        <member name="M:MvcExtensions.FilterRegistryExtensions.Register``1(MvcExtensions.IFilterRegistry,MvcExtensions.TypeCatalog)">
            <summary>
            Registers the specified filter for the given controller types.
            </summary>
            <typeparam name="TFilter">The type of the filter.</typeparam>
            <param name="instance">The instance.</param>
            <param name="typeCatalog">The controller types.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.FilterRegistryExtensions.Register``1(MvcExtensions.IFilterRegistry,MvcExtensions.TypeCatalog,System.Action{``0})">
            <summary>
            Registers and configures the specified filter for the given controller types.
            </summary>
            <typeparam name="TFilter">The type of the filter.</typeparam>
            <param name="instance">The instance.</param>
            <param name="typeCatalog">The controller types.</param>
            <param name="configureFilter">The configure filter action.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.FilterRegistryExtensions.Register``2(MvcExtensions.IFilterRegistry,MvcExtensions.TypeCatalog)">
            <summary>
            Registers the specified filters for the given controller types.
            </summary>
            <typeparam name="TFilter1">The type of the filter1.</typeparam>
            <typeparam name="TFilter2">The type of the filter2.</typeparam>
            <param name="instance">The instance.</param>
            <param name="typeCatalog">The controller types.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.FilterRegistryExtensions.Register``3(MvcExtensions.IFilterRegistry,MvcExtensions.TypeCatalog)">
            <summary>
            Registers the specified filters for the given controller types.
            </summary>
            <typeparam name="TFilter1">The type of the filter1.</typeparam>
            <typeparam name="TFilter2">The type of the filter2.</typeparam>
            <typeparam name="TFilter3">The type of the filter3.</typeparam>
            <param name="instance">The instance.</param>
            <param name="typeCatalog">The controller types.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.FilterRegistryExtensions.Register``4(MvcExtensions.IFilterRegistry,MvcExtensions.TypeCatalog)">
            <summary>
            Registers the specified filters for the given controller types.
            </summary>
            <typeparam name="TFilter1">The type of the filter1.</typeparam>
            <typeparam name="TFilter2">The type of the filter2.</typeparam>
            <typeparam name="TFilter3">The type of the filter3.</typeparam>
            <typeparam name="TFilter4">The type of the filter4.</typeparam>
            <param name="instance">The instance.</param>
            <param name="typeCatalog">The controller types.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.FilterRegistryExtensions.Register``2(MvcExtensions.IFilterRegistry)">
            <summary>
            Registers the specified filter for the given controller.
            </summary>
            <typeparam name="TController">The type of the controller.</typeparam>
            <typeparam name="TFilter">The type of the filter.</typeparam>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.FilterRegistryExtensions.Register``2(MvcExtensions.IFilterRegistry,System.Action{``1})">
            <summary>
            Registers and configures the specified filter for the given controller.
            </summary>
            <typeparam name="TController">The type of the controller.</typeparam>
            <typeparam name="TFilter">The type of the filter.</typeparam>
            <param name="instance">The instance.</param>
            <param name="configureFilter">The configure filter.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.FilterRegistryExtensions.Register``3(MvcExtensions.IFilterRegistry)">
            <summary>
            Registers the specified filters for the given controller.
            </summary>
            <typeparam name="TController">The type of the controller.</typeparam>
            <typeparam name="TFilter1">The type of the filter1.</typeparam>
            <typeparam name="TFilter2">The type of the filter2.</typeparam>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.FilterRegistryExtensions.Register``4(MvcExtensions.IFilterRegistry)">
            <summary>
            Registers the specified filters for the given controller.
            </summary>
            <typeparam name="TController">The type of the controller.</typeparam>
            <typeparam name="TFilter1">The type of the filter1.</typeparam>
            <typeparam name="TFilter2">The type of the filter2.</typeparam>
            <typeparam name="TFilter3">The type of the filter3.</typeparam>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.FilterRegistryExtensions.Register``5(MvcExtensions.IFilterRegistry)">
            <summary>
            Registers the specified filters for the given controller.
            </summary>
            <typeparam name="TController">The type of the controller.</typeparam>
            <typeparam name="TFilter1">The type of the filter1.</typeparam>
            <typeparam name="TFilter2">The type of the filter2.</typeparam>
            <typeparam name="TFilter3">The type of the filter3.</typeparam>
            <typeparam name="TFilter4">The type of the filter4.</typeparam>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.FilterRegistryExtensions.Register``2(MvcExtensions.IFilterRegistry,System.Linq.Expressions.Expression{System.Action{``0}})">
            <summary>
            Registers the specified filter for the given controller action.
            </summary>
            <typeparam name="TController">The type of the controller.</typeparam>
            <typeparam name="TFilter">The type of the filter.</typeparam>
            <param name="instance">The instance.</param>
            <param name="action">The controller action method.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.FilterRegistryExtensions.Register``2(MvcExtensions.IFilterRegistry,System.Linq.Expressions.Expression{System.Action{``0}},System.Action{``1})">
            <summary>
            Registers and configures the specified filter for the given controller action.
            </summary>
            <typeparam name="TController">The type of the controller.</typeparam>
            <typeparam name="TFilter">The type of the filter.</typeparam>
            <param name="instance">The instance.</param>
            <param name="action">The controller action method.</param>
            <param name="configureFilter">The configure filter.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.FilterRegistryExtensions.Register``3(MvcExtensions.IFilterRegistry,System.Linq.Expressions.Expression{System.Action{``0}})">
            <summary>
            Registers the specified filters for the given controller action.
            </summary>
            <typeparam name="TController">The type of the controller.</typeparam>
            <typeparam name="TFilter1">The type of the filter1.</typeparam>
            <typeparam name="TFilter2">The type of the filter2.</typeparam>
            <param name="instance">The instance.</param>
            <param name="action">The controller action method.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.FilterRegistryExtensions.Register``4(MvcExtensions.IFilterRegistry,System.Linq.Expressions.Expression{System.Action{``0}})">
            <summary>
            Registers the specified filters for the given controller action.
            </summary>
            <typeparam name="TController">The type of the controller.</typeparam>
            <typeparam name="TFilter1">The type of the filter1.</typeparam>
            <typeparam name="TFilter2">The type of the filter2.</typeparam>
            <typeparam name="TFilter3">The type of the filter3.</typeparam>
            <param name="instance">The instance.</param>
            <param name="action">The controller action method.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.FilterRegistryExtensions.Register``5(MvcExtensions.IFilterRegistry,System.Linq.Expressions.Expression{System.Action{``0}})">
            <summary>
            Registers the specified filters for the given controller action.
            </summary>
            <typeparam name="TController">The type of the controller.</typeparam>
            <typeparam name="TFilter1">The type of the filter1.</typeparam>
            <typeparam name="TFilter2">The type of the filter2.</typeparam>
            <typeparam name="TFilter3">The type of the filter3.</typeparam>
            <typeparam name="TFilter4">The type of the filter4.</typeparam>
            <param name="instance">The instance.</param>
            <param name="action">The controller action method.</param>
            <returns></returns>
        </member>
        <member name="T:MvcExtensions.FilterRegistry">
            <summary>
            The default filter registry which supports fluent registration.
            </summary>
        </member>
        <member name="T:MvcExtensions.IFilterRegistry">
            <summary>
            Represents an interface which is used to fluently registered <seealso cref="T:System.Web.Mvc.FilterAttribute"/>.
            </summary>
        </member>
        <member name="M:MvcExtensions.IFilterRegistry.Register``2(System.Collections.Generic.IEnumerable{System.Func{``1}})">
            <summary>
            Registers the specified filters for the given controller.
            </summary>
            <typeparam name="TController">The type of the controller.</typeparam>
            <typeparam name="TFilter">The type of the filter.</typeparam>
            <param name="filters">The filters.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.IFilterRegistry.Register``2(System.Linq.Expressions.Expression{System.Action{``0}},System.Collections.Generic.IEnumerable{System.Func{``1}})">
            <summary>
            Registers the specified filters for the given controller action.
            </summary>
            <typeparam name="TController">The type of the controller.</typeparam>
            <typeparam name="TFilter">The type of the filter.</typeparam>
            <param name="action">The controller action method.</param>
            <param name="filters">The filters.</param>
            <returns></returns>
        </member>
        <member name="P:MvcExtensions.IFilterRegistry.Container">
            <summary>
            Gets the container.
            </summary>
            <value>The container.</value>
        </member>
        <member name="P:MvcExtensions.IFilterRegistry.Items">
            <summary>
            Gets the registered items.
            </summary>
            <value>The items.</value>
        </member>
        <member name="M:MvcExtensions.FilterRegistry.#ctor(MvcExtensions.ContainerAdapter)">
            <summary>
            Initializes a new instance of the <see cref="T:MvcExtensions.FilterRegistry"/> class.
            </summary>
            <param name="container">The container.</param>
        </member>
        <member name="M:MvcExtensions.FilterRegistry.Register``2(System.Collections.Generic.IEnumerable{System.Func{``1}})">
            <summary>
            Registers the specified filters for the given controller.
            </summary>
            <typeparam name="TController">The type of the controller.</typeparam>
            <typeparam name="TFilter">The type of the filter.</typeparam>
            <param name="filters">The filters.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.FilterRegistry.Register``2(System.Linq.Expressions.Expression{System.Action{``0}},System.Collections.Generic.IEnumerable{System.Func{``1}})">
            <summary>
            Registers the specified filters for the given controller action.
            </summary>
            <typeparam name="TController">The type of the controller.</typeparam>
            <typeparam name="TFilter">The type of the filter.</typeparam>
            <param name="action">The action.</param>
            <param name="filters">The filters.</param>
            <returns></returns>
        </member>
        <member name="P:MvcExtensions.FilterRegistry.Container">
            <summary>
            Gets the container.
            </summary>
            <value>The container.</value>
        </member>
        <member name="P:MvcExtensions.FilterRegistry.Items">
            <summary>
            Gets the registered items.
            </summary>
            <value>The items.</value>
        </member>
        <member name="T:MvcExtensions.FilterRegistryActionItem`1">
            <summary>
            Defines a class to store the <see cref="T:System.Web.Mvc.FilterAttribute"/> factories of <seealso cref="T:System.Web.Mvc.Controller"/> action method.
            </summary>
            <typeparam name="TController">The type of the controller.</typeparam>
        </member>
        <member name="T:MvcExtensions.FilterRegistryItem">
            <summary>
            Defines a base class to store the <see cref="T:System.Web.Mvc.FilterAttribute"/> factories.
            </summary>
        </member>
        <member name="M:MvcExtensions.FilterRegistryItem.#ctor(System.Collections.Generic.IEnumerable{System.Func{System.Web.Mvc.IMvcFilter}},System.Web.Mvc.FilterScope)">
            <summary>
            Initializes a new instance of the <see cref="T:MvcExtensions.FilterRegistryItem"/> class.
            </summary>
            <param name="filters">The filters.</param>
            <param name="filterScope"></param>
        </member>
        <member name="M:MvcExtensions.FilterRegistryItem.IsMatching(System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor)">
            <summary>
            Determines whether this filter matches with give controller context.
            </summary>
            <param name="controllerContext">The controller context.</param>
            <param name="actionDescriptor">The action descriptor.</param>
            <returns>
            <c>true</c> if the specified controller context is matching; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MvcExtensions.FilterRegistryItem.BuildFilters">
            <summary>
            Get the <see cref="T:System.Web.Mvc.Filter"/> metadatas
            </summary>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.FilterRegistryActionItem`1.#ctor(System.Linq.Expressions.Expression{System.Action{`0}},System.Collections.Generic.IEnumerable{System.Func{System.Web.Mvc.IMvcFilter}})">
            <summary>
            Initializes a new instance of the <see cref="T:MvcExtensions.FilterRegistryActionItem`1"/> class.
            </summary>
            <param name="action">The action.</param>
            <param name="filters">The filters.</param>
        </member>
        <member name="M:MvcExtensions.FilterRegistryActionItem`1.IsMatching(System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor)">
            <summary>
            Determines whether the specified controller context is matching.
            </summary>
            <param name="controllerContext">The controller context.</param>
            <param name="actionDescriptor">The action descriptor.</param>
            <returns>
            <c>true</c> if the specified controller context is matching; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:MvcExtensions.FilterRegistryControllerItem`1">
            <summary>
            Defines a class to store the <see cref="T:System.Web.Mvc.FilterAttribute"/> factories of <seealso cref="T:System.Web.Mvc.Controller"/>.
            </summary>
            <typeparam name="TController">The type of the controller.</typeparam>
        </member>
        <member name="M:MvcExtensions.FilterRegistryControllerItem`1.#ctor(System.Collections.Generic.IEnumerable{System.Func{System.Web.Mvc.IMvcFilter}})">
            <summary>
            Initializes a new instance of the <see cref="T:MvcExtensions.FilterRegistryControllerItem`1"/> class.
            </summary>
            <param name="filters">The filters.</param>
        </member>
        <member name="M:MvcExtensions.FilterRegistryControllerItem`1.IsMatching(System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor)">
            <summary>
            Determines whether the specified controller context is matching.
            </summary>
            <param name="controllerContext">The controller context.</param>
            <param name="actionDescriptor">The action descriptor.</param>
            <returns>
            <c>true</c> if the specified controller context is matching; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:MvcExtensions.ConfigureFiltersBase">
            <summary>
            Defines a class to configure <seealso cref="T:System.Web.Mvc.FilterAttribute"/> for <see cref="T:System.Web.Mvc.Controller"/> or action methods.
            </summary>
        </member>
        <member name="M:MvcExtensions.ConfigureFiltersBase.#ctor(MvcExtensions.IFilterRegistry)">
            <summary>
            Initializes a new instance of the <see cref="T:MvcExtensions.ConfigureFiltersBase"/> class.
            </summary>
            <param name="registry">The registry.</param>
        </member>
        <member name="M:MvcExtensions.ConfigureFiltersBase.Execute">
            <summary>
            Executes the task.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ConfigureFiltersBase.Configure">
            <summary>
            Configures the filters.
            </summary>
        </member>
        <member name="P:MvcExtensions.ConfigureFiltersBase.Registry">
            <summary>
            Gets the filter registry.
            </summary>
            <value>The filter registry.</value>
        </member>
        <member name="T:MvcExtensions.Bootstrapper">
            <summary>
            Defines a base class which is used to execute application startup and cleanup tasks.
            </summary>
        </member>
        <member name="T:MvcExtensions.IBootstrapper">
            <summary>
            Represents an interface which is used to execute <seealso cref="T:MvcExtensions.BootstrapperTask"/>.
            </summary>
        </member>
        <member name="M:MvcExtensions.IBootstrapper.ExecuteBootstrapperTasks">
            <summary>
            Executes the <seealso cref="T:MvcExtensions.BootstrapperTask"/>.
            </summary>
        </member>
        <member name="M:MvcExtensions.IBootstrapper.DisposeBootstrapperTasks">
            <summary>
            Dispose the <seealso cref="T:MvcExtensions.BootstrapperTask"/>.
            </summary>
        </member>
        <member name="M:MvcExtensions.IBootstrapper.ExecutePerRequestTasks">
            <summary>
            Executes the <seealso cref="T:MvcExtensions.PerRequestTask"/>.
            </summary>
        </member>
        <member name="M:MvcExtensions.IBootstrapper.DisposePerRequestTasks">
            <summary>
            Dispose the <seealso cref="T:MvcExtensions.PerRequestTask"/>.
            </summary>
        </member>
        <member name="P:MvcExtensions.IBootstrapper.BuildManager">
            <summary>
            Gets the build manager.
            </summary>
            <value>The build manager.</value>
        </member>
        <member name="P:MvcExtensions.IBootstrapper.BootstrapperTasks">
            <summary>
            Gets the bootstrapper tasks.
            </summary>
            <value>The bootstrapper tasks.</value>
        </member>
        <member name="P:MvcExtensions.IBootstrapper.PerRequestTasks">
            <summary>
            Gets the per request task registry.
            </summary>
            <value>The per request tasks.</value>
        </member>
        <member name="P:MvcExtensions.IBootstrapper.Adapter">
            <summary>
            Gets the container.
            </summary>
            <value>The container.</value>
        </member>
        <member name="M:MvcExtensions.Bootstrapper.#ctor(MvcExtensions.IBuildManager,MvcExtensions.IBootstrapperTasksRegistry,MvcExtensions.IPerRequestTasksRegistry)">
            <summary>
            Initializes a new instance of the <see cref="T:MvcExtensions.Bootstrapper"/> class.
            </summary>
            <param name="buildManager">The build manager.</param>
            <param name="bootstrapperTasks">The bootstrapper tasks.</param>
            <param name="perRequestTasks">The per request tasks.</param>
        </member>
        <member name="M:MvcExtensions.Bootstrapper.ExecuteBootstrapperTasks">
            <summary>
            Executes the <seealso cref="T:MvcExtensions.BootstrapperTask"/>.
            </summary>
        </member>
        <member name="M:MvcExtensions.Bootstrapper.DisposeBootstrapperTasks">
            <summary>
            Dispose the <seealso cref="T:MvcExtensions.BootstrapperTask"/>.
            </summary>
        </member>
        <member name="M:MvcExtensions.Bootstrapper.ExecutePerRequestTasks">
            <summary>
            Executes the <seealso cref="T:MvcExtensions.PerRequestTask"/>.
            </summary>
        </member>
        <member name="M:MvcExtensions.Bootstrapper.DisposePerRequestTasks">
            <summary>
            Dispose the <seealso cref="T:MvcExtensions.PerRequestTask"/>.
            </summary>
        </member>
        <member name="M:MvcExtensions.Bootstrapper.CreateAdapter">
            <summary>
            Creates the container adapter.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.Bootstrapper.LoadModules">
            <summary>
            Loads the container specific modules.
            </summary>
        </member>
        <member name="M:MvcExtensions.Bootstrapper.DisposeCore">
            <summary>
            Disposes the resources.
            </summary>
        </member>
        <member name="P:MvcExtensions.Bootstrapper.BuildManager">
            <summary>
            Gets  the build manager.
            </summary>
            <value>The build manager.</value>
        </member>
        <member name="P:MvcExtensions.Bootstrapper.BootstrapperTasks">
            <summary>
            Gets the bootstrapper task registry.
            </summary>
            <value>The bootstrapper tasks.</value>
        </member>
        <member name="P:MvcExtensions.Bootstrapper.PerRequestTasks">
            <summary>
            Gets the per request task registry.
            </summary>
            <value>The per request tasks.</value>
        </member>
        <member name="P:MvcExtensions.Bootstrapper.Adapter">
            <summary>
            Gets the container.
            </summary>
            <value>The container.</value>
        </member>
        <member name="T:MvcExtensions.RegisterModelBinders">
            <summary>
            Defines a class which is used to register available <seealso cref="T:System.Web.Mvc.IModelBinder"/>.
            </summary>
        </member>
        <member name="M:MvcExtensions.RegisterModelBinders.#ctor(MvcExtensions.ContainerAdapter)">
            <summary>
            Initializes a new instance of the <see cref="T:MvcExtensions.RegisterModelBinders"/> class.
            </summary>
            <param name="container">The container.</param>
        </member>
        <member name="M:MvcExtensions.RegisterModelBinders.Execute">
            <summary>
            Executes the task. Returns continuation of the next task(s) in the chain.
            </summary>
            <returns></returns>
        </member>
        <member name="P:MvcExtensions.RegisterModelBinders.Container">
            <summary>
            Gets the container.
            </summary>
            <value>The container.</value>
        </member>
        <member name="T:MvcExtensions.RegisterRoutesBase">
            <summary>
            Defines a base class to configure <seealso cref="T:System.Web.Routing.RouteTable"/>.
            </summary>
        </member>
        <member name="M:MvcExtensions.RegisterRoutesBase.#ctor(System.Web.Routing.RouteCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:MvcExtensions.RegisterRoutesBase"/> class.
            </summary>
            <param name="routes">The routes.</param>
        </member>
        <member name="M:MvcExtensions.RegisterRoutesBase.Execute">
            <summary>
            Executes the task. Returns continuation of the next task(s) in the chain.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.RegisterRoutesBase.Register">
            <summary>
            Registers the routes.
            </summary>
        </member>
        <member name="P:MvcExtensions.RegisterRoutesBase.Routes">
            <summary>
            Gets the routes.
            </summary>
            <value>The routes.</value>
        </member>
        <member name="T:MvcExtensions.RegisterViewEngines">
            <summary>
            Defines a class which is used to register available <seealso cref="T:System.Web.Mvc.IViewEngine"/>.
            </summary>
        </member>
        <member name="M:MvcExtensions.RegisterViewEngines.#ctor(MvcExtensions.ContainerAdapter)">
            <summary>
            Initializes a new instance of the <see cref="T:MvcExtensions.RegisterViewEngines"/> class.
            </summary>
            <param name="container">The container.</param>
        </member>
        <member name="M:MvcExtensions.RegisterViewEngines.Execute">
            <summary>
            Executes the task. Returns continuation of the next task(s) in the chain.
            </summary>
            <returns></returns>
        </member>
        <member name="P:MvcExtensions.RegisterViewEngines.Container">
            <summary>
            Gets the container.
            </summary>
            <value>The container.</value>
        </member>
        <member name="T:MvcExtensions.EnumerableExtensions">
            <summary>
            Defines an static class which contains extension methods of <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
        </member>
        <member name="M:MvcExtensions.EnumerableExtensions.Each``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Executes the provided action for each item.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="instance">The instance.</param>
            <param name="action">The action.</param>
        </member>
        <member name="T:MvcExtensions.TypeExtensions">
            <summary>
            Defines an static class which contains extension methods of <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="M:MvcExtensions.TypeExtensions.HasDefaultConstructor(System.Type)">
            <summary>
            Determines whether the specified type has parameter less constructor..
            </summary>
            <param name="instance">The instance.</param>
            <returns>
            <c>true</c> if parameter less constructor exists; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MvcExtensions.TypeExtensions.PublicTypes(System.Reflection.Assembly)">
            <summary>
            Gets the public types of the given assembly.
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.TypeExtensions.PublicTypes(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Gets the public types of the given assemblies.
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.TypeExtensions.ConcreteTypes(System.Reflection.Assembly)">
            <summary>
            Gets the concretes types of the given assembly.
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.TypeExtensions.ConcreteTypes(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Gets the concretes types of the given assemblies.
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="T:MvcExtensions.ExtendedControllerActionInvoker">
            <summary>
            The default <seealso cref="T:System.Web.Mvc.IActionInvoker"/> which supports the fluent filter registration and dependency injection.
            </summary>
        </member>
        <member name="M:MvcExtensions.ExtendedControllerActionInvoker.#ctor(MvcExtensions.ContainerAdapter)">
            <summary>
            Initializes a new instance of the <see cref="T:MvcExtensions.ExtendedControllerActionInvoker"/> class.
            </summary>
            <param name="container">The container.</param>
        </member>
        <member name="M:MvcExtensions.ExtendedControllerActionInvoker.GetFilters(System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor)">
            <summary>
            Retrieves information about the action filters.
            </summary>
            <param name="controllerContext">The controller context.</param>
            <param name="actionDescriptor">The action descriptor.</param>
            <returns>Information about the action filters.</returns>
        </member>
        <member name="P:MvcExtensions.ExtendedControllerActionInvoker.Container">
            <summary>
            Gets the container.
            </summary>
            <value>The container.</value>
        </member>
        <member name="T:MvcExtensions.ExtendedMvcApplication">
            <summary>
            Defines a base class to manage application life cycle.
            </summary>
        </member>
        <member name="M:MvcExtensions.ExtendedMvcApplication.Init">
            <summary>
            Executes custom initialization code after all event handler modules have been added.
            </summary>
        </member>
        <member name="M:MvcExtensions.ExtendedMvcApplication.Application_Start">
            <summary>
            Fires when the application starts.
            </summary>
        </member>
        <member name="M:MvcExtensions.ExtendedMvcApplication.Application_End">
            <summary>
            Fires when the application ends.
            </summary>
        </member>
        <member name="M:MvcExtensions.ExtendedMvcApplication.CreateBootstrapper">
            <summary>
            Creates the bootstrapper.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ExtendedMvcApplication.OnStart">
            <summary>
            Executes when the application starts.
            </summary>
        </member>
        <member name="M:MvcExtensions.ExtendedMvcApplication.OnBeginRequest(System.Web.HttpContextBase)">
            <summary>
            Called when request starts.
            </summary>
        </member>
        <member name="M:MvcExtensions.ExtendedMvcApplication.OnPerRequestTasksExecuting">
            <summary>
            Executes before the registered <see cref="T:MvcExtensions.PerRequestTask"/> executes.
            </summary>
        </member>
        <member name="M:MvcExtensions.ExtendedMvcApplication.OnPerRequestTasksExecuted">
            <summary>
            Executes after the registered <see cref="T:MvcExtensions.PerRequestTask"/> executes.
            </summary>
        </member>
        <member name="M:MvcExtensions.ExtendedMvcApplication.OnEndRequest(System.Web.HttpContextBase)">
            <summary>
            Executes when the request ends.
            </summary>
        </member>
        <member name="M:MvcExtensions.ExtendedMvcApplication.OnPerRequestTasksDisposing">
            <summary>
            Executes before the registered <see cref="T:MvcExtensions.PerRequestTask"/> disposes.
            </summary>
        </member>
        <member name="M:MvcExtensions.ExtendedMvcApplication.OnPerRequestTasksDisposed">
            <summary>
            Executes after the registered <see cref="T:MvcExtensions.PerRequestTask"/> disposes.
            </summary>
        </member>
        <member name="M:MvcExtensions.ExtendedMvcApplication.OnEnd">
            <summary>
            Executes when the application ends.
            </summary>
        </member>
        <member name="M:MvcExtensions.ExtendedMvcApplication.GetCurrentAdapter">
            <summary>
            Gets the current adapter.
            </summary>
            <returns></returns>
        </member>
        <member name="P:MvcExtensions.ExtendedMvcApplication.Bootstrapper">
            <summary>
            Gets the bootstrapper.
            </summary>
            <value>The bootstrapper.</value>
        </member>
        <member name="P:MvcExtensions.ExtendedMvcApplication.Adapter">
            <summary>
            Gets the container.
            </summary>
            <value>The container.</value>
        </member>
        <member name="T:MvcExtensions.Invariant">
            <summary>
            Defines a utility class to validate method arguments.
            </summary>
        </member>
        <member name="M:MvcExtensions.Invariant.IsNotNull(System.Object,System.String)">
            <summary>
            Determines whether the given argument is not null.
            </summary>
            <param name="value">The value.</param>
            <param name="parameterName">Name of the parameter.</param>
        </member>
        <member name="T:MvcExtensions.ExceptionMessages">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:MvcExtensions.ExceptionMessages.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:MvcExtensions.ExceptionMessages.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:MvcExtensions.ExceptionMessages.ActivateAllExceptionMessage">
            <summary>
              Looks up a localized string similar to Activation error occurred while trying to get all instances of type {0}..
            </summary>
        </member>
        <member name="P:MvcExtensions.ExceptionMessages.ActivationExceptionMessage">
            <summary>
              Looks up a localized string similar to Activation error occurred while trying to get instance of type {0}, key &quot;{1}&quot;..
            </summary>
        </member>
        <member name="P:MvcExtensions.ExceptionMessages.CannotApplyEmailWhenThereIsAnActiveExpression">
            <summary>
              Looks up a localized string similar to Cannot apply email when there is an active expression..
            </summary>
        </member>
        <member name="P:MvcExtensions.ExceptionMessages.CannotApplyUrlWhenThereIsAnActiveExpression">
            <summary>
              Looks up a localized string similar to Cannot apply url when there is an active expression..
            </summary>
        </member>
        <member name="P:MvcExtensions.ExceptionMessages.CannotBeNull">
            <summary>
              Looks up a localized string similar to &quot;{0}&quot; cannot be null..
            </summary>
        </member>
        <member name="P:MvcExtensions.ExceptionMessages.CannotHaveMoreThanOneModelBinderForTheSameModelType">
            <summary>
              Looks up a localized string similar to Cannot have more than one model binder &quot;{0}&quot; for the same model type &quot;{1}&quot;..
            </summary>
        </member>
        <member name="P:MvcExtensions.ExceptionMessages.ExcludeAlreadyExists">
            <summary>
              Looks up a localized string similar to You cannot include if you have already specified exclude..
            </summary>
        </member>
        <member name="P:MvcExtensions.ExceptionMessages.IncorrectTypeMustBeDescended">
            <summary>
              Looks up a localized string similar to Incorrect type, it must be descended of &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:MvcExtensions.ExceptionMessages.InvalidActionInvokerTypeTypeMustImplementIActionInvoker">
            <summary>
              Looks up a localized string similar to Invalid action invoker type. Type must implement &quot;IActionInvoker&quot;..
            </summary>
        </member>
        <member name="P:MvcExtensions.ExceptionMessages.InvalidControllerTypeTypeMustBeAInheritedFromController">
            <summary>
              Looks up a localized string similar to Invalid controller type. Type must be a inherited from &quot;Controller&quot;..
            </summary>
        </member>
        <member name="P:MvcExtensions.ExceptionMessages.InvalidEmailAddressFormat">
            <summary>
              Looks up a localized string similar to Invalid email address format..
            </summary>
        </member>
        <member name="P:MvcExtensions.ExceptionMessages.InvalidUrlFormat">
            <summary>
              Looks up a localized string similar to Invalid url format..
            </summary>
        </member>
        <member name="P:MvcExtensions.ExceptionMessages.IsNotATargetType">
            <summary>
              Looks up a localized string similar to &quot;{0}&quot; is not a &quot;{1}&quot; type..
            </summary>
        </member>
        <member name="P:MvcExtensions.ExceptionMessages.JsonGet">
            <summary>
              Looks up a localized string similar to This request has been blocked because sensitive information could be disclosed to third party web sites when this is used in a GET request. To allow GET requests, set JsonRequestBehavior to AllowGet..
            </summary>
        </member>
        <member name="P:MvcExtensions.ExceptionMessages.MustBeAValidClass">
            <summary>
              Looks up a localized string similar to &quot;{0}&quot; must be a valid class..
            </summary>
        </member>
        <member name="P:MvcExtensions.ExceptionMessages.SameResponderExists">
            <summary>
              Looks up a localized string similar to Responder with the same type &quot;{0}&quot; already exists..
            </summary>
        </member>
        <member name="P:MvcExtensions.ExceptionMessages.TheExpressionMustBeAValidControllerAction">
            <summary>
              Looks up a localized string similar to The expression must be a valid controller action..
            </summary>
        </member>
        <member name="P:MvcExtensions.ExceptionMessages.ThePropertyNameOfTypeCouldNotBeFound">
            <summary>
              Looks up a localized string similar to The property {0}.{1} could not be found..
            </summary>
        </member>
        <member name="T:MvcExtensions.RegisterValueProviderFactories">
            <summary>
            Defines a class which is used to register available <seealso cref="T:System.Web.Mvc.ValueProviderFactory"/>.
            </summary>
        </member>
        <member name="M:MvcExtensions.RegisterValueProviderFactories.#ctor(MvcExtensions.ContainerAdapter)">
            <summary>
            Initializes a new instance of the <see cref="T:MvcExtensions.RegisterValueProviderFactories"/> class.
            </summary>
            <param name="container">The container.</param>
        </member>
        <member name="M:MvcExtensions.RegisterValueProviderFactories.Execute">
            <summary>
            Executes the task. Returns continuation of the next task(s) in the chain.
            </summary>
            <returns></returns>
        </member>
        <member name="P:MvcExtensions.RegisterValueProviderFactories.Container">
            <summary>
            Gets the container.
            </summary>
            <value>The container.</value>
        </member>
        <member name="T:MvcExtensions.RegisterModelMetadata">
            <summary>
            Defines a class which is used to register the default <seealso cref="T:System.Web.Mvc.ModelMetadataProvider"/>.
            </summary>
        </member>
        <member name="M:MvcExtensions.RegisterModelMetadata.#ctor(MvcExtensions.ContainerAdapter)">
            <summary>
            Initializes a new instance of the <see cref="T:MvcExtensions.RegisterModelMetadata"/> class.
            </summary>
            <param name="container">The container.</param>
        </member>
        <member name="M:MvcExtensions.RegisterModelMetadata.Execute">
            <summary>
            Executes the task. Returns continuation of the next task(s) in the chain.
            </summary>
            <returns></returns>
        </member>
        <member name="P:MvcExtensions.RegisterModelMetadata.Container">
            <summary>
            Gets the container.
            </summary>
            <value>The container.</value>
        </member>
        <member name="T:MvcExtensions.RegularExpressionValidationMetadata">
            <summary>
            Represents a class to store regular expression validation metadata.
            </summary>
        </member>
        <member name="M:MvcExtensions.RegularExpressionValidationMetadata.CreateValidatorCore(MvcExtensions.ExtendedModelMetadata,System.Web.Mvc.ControllerContext)">
            <summary>
            Creates the validator.
            </summary>
            <param name="modelMetadata">The model metadata.</param>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="P:MvcExtensions.RegularExpressionValidationMetadata.Pattern">
            <summary>
            Gets or sets the pattern.
            </summary>
            <value>The pattern.</value>
        </member>
        <member name="T:MvcExtensions.ExtendedModelMetadata">
            <summary>
            Defines a metadata class which supports fluent metadata registration.
            </summary>
        </member>
        <member name="M:MvcExtensions.ExtendedModelMetadata.#ctor(System.Web.Mvc.ModelMetadataProvider,System.Type,System.Func{System.Object},System.Type,System.String,MvcExtensions.ModelMetadataItem)">
            <summary>
            Initializes a new instance of the <see cref="T:MvcExtensions.ExtendedModelMetadata"/> class.
            </summary>
            <param name="provider">The provider.</param>
            <param name="containerType">Type of the container.</param>
            <param name="modelAccessor">The model accessor.</param>
            <param name="modelType">Type of the model.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="metadata">The metadata.</param>
        </member>
        <member name="P:MvcExtensions.ExtendedModelMetadata.Metadata">
            <summary>
            Gets or sets the metadata.
            </summary>
            <value>The metadata.</value>
        </member>
        <member name="T:MvcExtensions.IModelMetadataFormattableItem">
            <summary>
            Represents an interface of a metadata that supports formatting.
            </summary>
        </member>
        <member name="P:MvcExtensions.IModelMetadataFormattableItem.DisplayFormat">
            <summary>
            Gets or sets the display format.
            </summary>
            <value>The display format.</value>
        </member>
        <member name="P:MvcExtensions.IModelMetadataFormattableItem.EditFormat">
            <summary>
            Gets or sets the edit format.
            </summary>
            <value>The edit format.</value>
        </member>
        <member name="P:MvcExtensions.IModelMetadataFormattableItem.ApplyFormatInEditMode">
            <summary>
            Gets or sets a value indicating whether to apply format in edit mode.
            </summary>
            <value>
            <c>true</c> if [apply format in edit mode]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:MvcExtensions.IModelMetadataRegistry">
            <summary>
            Represents an interface to store all the metadata of the models.
            </summary>
        </member>
        <member name="M:MvcExtensions.IModelMetadataRegistry.RegisterModel(System.Type,MvcExtensions.ModelMetadataItem)">
            <summary>
            Registers the model type metadata.
            </summary>
            <param name="modelType">Type of the model.</param>
            <param name="metadataItem">The metadata.</param>
        </member>
        <member name="M:MvcExtensions.IModelMetadataRegistry.RegisterModelProperties(System.Type,System.Collections.Generic.IDictionary{System.String,MvcExtensions.ModelMetadataItem})">
            <summary>
            Registers the specified model type properties metadata.
            </summary>
            <param name="modelType">Type of the model.</param>
            <param name="metadataItems">The metadata dictionary.</param>
        </member>
        <member name="M:MvcExtensions.IModelMetadataRegistry.GetModelMetadata(System.Type)">
            <summary>
            Gets the model metadata.
            </summary>
            <param name="modelType">Type of the model.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.IModelMetadataRegistry.GetModelPropertyMetadata(System.Type,System.String)">
            <summary>
            Gets the model property metadata.
            </summary>
            <param name="modelType">Type of the model.</param>
            <param name="propertyName">Name of the property.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.IModelMetadataRegistry.GetModelPropertiesMetadata(System.Type)">
            <summary>
            Gets the model properties metadata.
            </summary>
            <param name="modelType">Type of the model.</param>
            <returns></returns>
        </member>
        <member name="T:MvcExtensions.StringLengthValidationMetadata">
            <summary>
            Represents a class to store string length validation metadata.
            </summary>
        </member>
        <member name="M:MvcExtensions.StringLengthValidationMetadata.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MvcExtensions.StringLengthValidationMetadata"/> class
            </summary>
        </member>
        <member name="M:MvcExtensions.StringLengthValidationMetadata.CreateValidatorCore(MvcExtensions.ExtendedModelMetadata,System.Web.Mvc.ControllerContext)">
            <summary>
            Creates the validator.
            </summary>
            <param name="modelMetadata">The model metadata.</param>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="P:MvcExtensions.StringLengthValidationMetadata.Maximum">
            <summary>
            Gets or sets the maximum.
            </summary>
            <value>The maximum.</value>
        </member>
        <member name="P:MvcExtensions.StringLengthValidationMetadata.Minimum">
            <summary>
            Gets or sets the minimum.
            </summary>
            <value>The minimum.</value>
        </member>
        <member name="T:MvcExtensions.ModelMetadataItem">
            <summary>
            Defines a base class that is used to store metadata.
            </summary>
        </member>
        <member name="M:MvcExtensions.ModelMetadataItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MvcExtensions.ModelMetadataItem"/> class.
            </summary>
        </member>
        <member name="P:MvcExtensions.ModelMetadataItem.DisplayName">
            <summary>
            Gets or sets the display name.
            </summary>
            <value>The display name.</value>
        </member>
        <member name="P:MvcExtensions.ModelMetadataItem.ShortDisplayName">
            <summary>
            Gets or sets the short name of the display.
            </summary>
            <value>The short name of the display.</value>
        </member>
        <member name="P:MvcExtensions.ModelMetadataItem.TemplateName">
            <summary>
            Gets or sets the name of the template.
            </summary>
            <value>The name of the template.</value>
        </member>
        <member name="P:MvcExtensions.ModelMetadataItem.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:MvcExtensions.ModelMetadataItem.IsReadOnly">
            <summary>
            Gets or sets the whether associate model is read only.
            </summary>
            <value>The is read only.</value>
        </member>
        <member name="P:MvcExtensions.ModelMetadataItem.IsRequired">
            <summary>
            Gets or sets the whether associate model is required.
            </summary>
            <value>The is required.</value>
        </member>
        <member name="P:MvcExtensions.ModelMetadataItem.HideSurroundingHtml">
            <summary>
            Gets or sets the hide surrounding HTML.
            </summary>
            <value>The hide surrounding HTML.</value>
        </member>
        <member name="P:MvcExtensions.ModelMetadataItem.RequestValidationEnabled">
            <summary>
            Gets or sets the request validation enabled.
            </summary>
            <value>The allow HTML.</value>
        </member>
        <member name="P:MvcExtensions.ModelMetadataItem.ShowForDisplay">
            <summary>
            Gets or sets a value indicating whether to show for display.
            </summary>
            <value><c>true</c> if [show for display]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MvcExtensions.ModelMetadataItem.ShowForEdit">
            <summary>
            Gets or sets a value indicating whether to show for edit.
            </summary>
            <value>The show for edit.</value>
        </member>
        <member name="P:MvcExtensions.ModelMetadataItem.NullDisplayText">
            <summary>
            Gets or sets the null display text.
            </summary>
            <value>The null display text.</value>
        </member>
        <member name="P:MvcExtensions.ModelMetadataItem.Watermark">
            <summary>
            Gets or sets the watermark.
            </summary>
            <value>The watermark.</value>
        </member>
        <member name="P:MvcExtensions.ModelMetadataItem.Validations">
            <summary>
            Gets or the validations metadata.
            </summary>
            <value>The validations.</value>
        </member>
        <member name="P:MvcExtensions.ModelMetadataItem.AdditionalSettings">
            <summary>
            Gets the additional settings.
            </summary>
            <value>The additional settings.</value>
        </member>
        <member name="P:MvcExtensions.ModelMetadataItem.Order">
            <summary>
            Gets or sets the order.
            </summary>
            <value>The order</value>
        </member>
        <member name="T:MvcExtensions.ModelMetadataItemBuilder`2">
            <summary>
            Defines a base class to fluently configure metadata.
            </summary>
        </member>
        <member name="M:MvcExtensions.ModelMetadataItemBuilder`2.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:MvcExtensions.ModelMetadataItemBuilder`2"/> class.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:MvcExtensions.ModelMetadataItemBuilder`2.DisplayName(System.String)">
            <summary>
            Sets the Display name.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ModelMetadataItemBuilder`2.DisplayName(System.Func{System.String})">
            <summary>
            Sets the Display name.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ModelMetadataItemBuilder`2.ShortDisplayName(System.String)">
            <summary>
            Sets the short display name.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ModelMetadataItemBuilder`2.ShortDisplayName(System.Func{System.String})">
            <summary>
            Sets the short display name.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ModelMetadataItemBuilder`2.Template(System.String)">
            <summary>
            Sets the Templates name.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ModelMetadataItemBuilder`2.Description(System.String)">
            <summary>
            Sets the Description.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ModelMetadataItemBuilder`2.Description(System.Func{System.String})">
            <summary>
            Sets the Description.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ModelMetadataItemBuilder`2.ReadOnly">
            <summary>
            Marks the value as read only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ModelMetadataItemBuilder`2.Writable">
            <summary>
            Marks the value as writable, this is handy when the framework initializes the
            value as read only and you want to negate it.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ModelMetadataItemBuilder`2.Compare(System.String)">
            <summary>
            Sets the other property that the value must match.
            </summary>
            <param name="otherProperty">The other property</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ModelMetadataItemBuilder`2.Compare(System.String,System.String)">
            <summary>
            Sets the other property that the value must match.
            </summary>
            <param name="otherProperty">The other property</param>
            <param name="errorMessage">The error message when the value is not specified.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ModelMetadataItemBuilder`2.Compare(System.String,System.Func{System.String})">
            <summary>
            Sets the other property that the value must match.
            </summary>
            <param name="otherProperty">The other property</param>
            <param name="errorMessage">The error message when the value is not specified.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ModelMetadataItemBuilder`2.Compare(System.String,System.Type,System.String)">
            <summary>
            Sets the other property that the value must match.
            </summary>
            <param name="errorMessageResourceType">Type of the error message resource.</param>
            <param name="errorMessageResourceName">Name of the error message resource.</param>
            <param name="otherProperty">The other property</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ModelMetadataItemBuilder`2.Required">
            <summary>
            Marks the value as required.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ModelMetadataItemBuilder`2.Required(System.String)">
            <summary>
            Marks the value as required.
            </summary>
            <param name="errorMessage">The error message when the value is not specified.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ModelMetadataItemBuilder`2.Required(System.Func{System.String})">
            <summary>
            Marks the value as required.
            </summary>
            <param name="errorMessage">The error message when the value is not specified.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ModelMetadataItemBuilder`2.Required(System.Type,System.String)">
            <summary>
            Marks the value as required.
            </summary>
            <param name="errorMessageResourceType">Type of the error message resource.</param>
            <param name="errorMessageResourceName">Name of the error message resource.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ModelMetadataItemBuilder`2.Optional">
            <summary>
            Marks the value as optional, this is handy when the framework initializes the 
            value as required and you want to negate it.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ModelMetadataItemBuilder`2.AsHidden">
            <summary>
            Marks the value to render as hidden input element in edit mode.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ModelMetadataItemBuilder`2.AsHidden(System.Boolean)">
            <summary>
            Marks the value to render as hidden input element in edit mode.
            </summary>
            <param name="hideSurroundingHtml">Indicates whether the value will appear in display mode</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ModelMetadataItemBuilder`2.HideSurroundingHtml">
            <summary>
            Hides surrounding HTML.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ModelMetadataItemBuilder`2.ShowSurroundingHtml">
            <summary>
            Shows surrounding HTML.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ModelMetadataItemBuilder`2.AllowHtml">
            <summary>
            Disables request validation for property.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ModelMetadataItemBuilder`2.DisallowHtml">
            <summary>
            Enebles request validation for property.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ModelMetadataItemBuilder`2.ShowForDisplay">
            <summary>
            Shows the value in display mode.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ModelMetadataItemBuilder`2.HideForDisplay">
            <summary>
            Hides the value in display mode.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ModelMetadataItemBuilder`2.ShowForEdit">
            <summary>
            Shows the value in edit mode.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ModelMetadataItemBuilder`2.HideForEdit">
            <summary>
            Hides the value in edit mode.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ModelMetadataItemBuilder`2.Show">
            <summary>
            Shows the value in both display and edit mode.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ModelMetadataItemBuilder`2.Hide">
            <summary>
            Hides the value in both display and edit mode.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ModelMetadataItemBuilder`2.NullDisplayText(System.String)">
            <summary>
            Sets the display text when the value is null.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ModelMetadataItemBuilder`2.NullDisplayText(System.Func{System.String})">
            <summary>
            Sets the display text when the value is null.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ModelMetadataItemBuilder`2.Watermark(System.String)">
            <summary>
            Sets the Watermark.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ModelMetadataItemBuilder`2.Watermark(System.Func{System.String})">
            <summary>
            Sets the Watermark.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ModelMetadataItemBuilder`2.Order(System.Int32)">
            <summary>
            Sets the order
            </summary>
            <param name="value">The order</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ModelMetadataItemBuilder`2.Required(System.Func{System.String},System.Type,System.String)">
            <summary>
            Marks the value as required.
            </summary>
            <param name="errorMessage">The error message.</param>
            <param name="errorMessageResourceType">Type of the error message resource.</param>
            <param name="errorMessageResourceName">Name of the error message resource.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ModelMetadataItemBuilder`2.Compare(System.String,System.Func{System.String},System.Type,System.String)">
            <summary>
            Sets the other property that the value must match.
            </summary>
            <param name="otherProperty">The other property.</param>
            <param name="errorMessage">The error message.</param>
            <param name="errorMessageResourceType">Type of the error message resource.</param>
            <param name="errorMessageResourceName">Name of the error message resource.</param>
            <returns></returns>
        </member>
        <member name="P:MvcExtensions.ModelMetadataItemBuilder`2.Item">
            <summary>
            Gets the internal item.
            </summary>
            <value>The item.</value>
        </member>
        <member name="T:MvcExtensions.ModelMetadataRegistry">
            <summary>
            Defines a class to store all the metadata of the models.
            </summary>
        </member>
        <member name="M:MvcExtensions.ModelMetadataRegistry.RegisterModel(System.Type,MvcExtensions.ModelMetadataItem)">
            <summary>
            Registers the model type metadata.
            </summary>
            <param name="modelType">Type of the model.</param>
            <param name="metadataItem">The metadata.</param>
        </member>
        <member name="M:MvcExtensions.ModelMetadataRegistry.RegisterModelProperties(System.Type,System.Collections.Generic.IDictionary{System.String,MvcExtensions.ModelMetadataItem})">
            <summary>
            Registers the specified model type properties metadata.
            </summary>
            <param name="modelType">Type of the model.</param>
            <param name="metadataItems">The metadata dictionary.</param>
        </member>
        <member name="M:MvcExtensions.ModelMetadataRegistry.GetModelMetadata(System.Type)">
            <summary>
            Gets the model metadata.
            </summary>
            <param name="modelType">Type of the model.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ModelMetadataRegistry.GetModelPropertyMetadata(System.Type,System.String)">
            <summary>
            Gets the model property metadata.
            </summary>
            <param name="modelType">Type of the model.</param>
            <param name="propertyName">Name of the property.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ModelMetadataRegistry.GetModelPropertiesMetadata(System.Type)">
            <summary>
            Gets the model properties metadata.
            </summary>
            <param name="modelType">Type of the model.</param>
            <returns></returns>
        </member>
        <member name="T:MvcExtensions.ValueTypeMetadataItem">
            <summary>
            Defines a class that is used to store <seealso cref="T:System.ValueType"/> metadata.
            </summary>
        </member>
        <member name="P:MvcExtensions.ValueTypeMetadataItem.DisplayFormat">
            <summary>
            Gets or sets the display format.
            </summary>
            <value>The display format.</value>
        </member>
        <member name="P:MvcExtensions.ValueTypeMetadataItem.EditFormat">
            <summary>
            Gets or sets the edit format.
            </summary>
            <value>The edit format.</value>
        </member>
        <member name="P:MvcExtensions.ValueTypeMetadataItem.ApplyFormatInEditMode">
            <summary>
            Gets or sets a value indicating whether to apply format in edit mode.
            </summary>
            <value>
            <c>true</c> if [apply format in edit mode]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:MvcExtensions.ValueTypeMetadataItemBuilder`1">
            <summary>
            Defines a class to fluently configure metadata of a <seealso cref="T:System.ValueType"/> type.
            </summary>
            <typeparam name="TValueType">The type of the value type.</typeparam>
        </member>
        <member name="M:MvcExtensions.ValueTypeMetadataItemBuilder`1.#ctor(MvcExtensions.ValueTypeMetadataItem)">
            <summary>
            Initializes a new instance of the <see cref="T:MvcExtensions.ValueTypeMetadataItemBuilder`1"/> class.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:MvcExtensions.ValueTypeMetadataItemBuilder`1.DisplayFormat(System.String)">
            <summary>
            Sets the format in display mode.
            </summary>
            <param name="format">The value.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ValueTypeMetadataItemBuilder`1.DisplayFormat(System.Func{System.String})">
            <summary>
            Sets the format in display mode.
            </summary>
            <param name="format">The value.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ValueTypeMetadataItemBuilder`1.EditFormat(System.String)">
            <summary>
            Sets the format in edit mode.
            </summary>
            <param name="format">The format.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ValueTypeMetadataItemBuilder`1.EditFormat(System.Func{System.String})">
            <summary>
            Sets the format in edit mode.
            </summary>
            <param name="format">The format.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ValueTypeMetadataItemBuilder`1.Format(System.String)">
            <summary>
            Sets format for both display and edit mode.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ValueTypeMetadataItemBuilder`1.Format(System.Func{System.String})">
            <summary>
            Sets format for both display and edit mode.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ValueTypeMetadataItemBuilder`1.ApplyFormatInEditMode">
            <summary>
            Indicates to apply format in edit mode.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ValueTypeMetadataItemBuilder`1.Range(`0,`0)">
            <summary>
            Sets the range of value, this comes into action when is <code>Required</code> is <code>true</code>.
            </summary>
            <param name="minimum">The minimum.</param>
            <param name="maximum">The maximum.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ValueTypeMetadataItemBuilder`1.Range(`0,`0,System.String)">
            <summary>
            Sets the range of value, this comes into action when is <code>Required</code> is <code>true</code>.
            </summary>
            <param name="minimum">The minimum.</param>
            <param name="maximum">The maximum.</param>
            <param name="errorMessage">The error message.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ValueTypeMetadataItemBuilder`1.Range(`0,`0,System.Func{System.String})">
            <summary>
            Sets the range of value, this comes into action when is <code>Required</code> is <code>true</code>.
            </summary>
            <param name="minimum">The minimum.</param>
            <param name="maximum">The maximum.</param>
            <param name="errorMessage">The error message.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ValueTypeMetadataItemBuilder`1.Range(`0,`0,System.Type,System.String)">
            <summary>
            Sets the range of value, this comes into action when is <code>Required</code> is <code>true</code>.
            </summary>
            <param name="minimum">The minimum.</param>
            <param name="maximum">The maximum.</param>
            <param name="errorMessageResourceType">Type of the error message resource.</param>
            <param name="errorMessageResourceName">Name of the error message resource.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ValueTypeMetadataItemBuilder`1.Range(`0,`0,System.Func{System.String},System.Type,System.String)">
            <summary>
            Sets the range of value, this comes into action when is <code>Required</code> is <code>true</code>.
            </summary>
            <param name="minimum">The minimum.</param>
            <param name="maximum">The maximum.</param>
            <param name="errorMessage">The error message.</param>
            <param name="errorMessageResourceType">Type of the error message resource.</param>
            <param name="errorMessageResourceName">Name of the error message resource.</param>
            <returns></returns>
        </member>
        <member name="T:MvcExtensions.ObjectMetadataItem">
            <summary>
            Defines a base class that is used to store unknown object's metadata.
            </summary>
        </member>
        <member name="T:MvcExtensions.ObjectMetadataItemBuilder`1">
            <summary>
            Defines a class to fluently configure metadata of a model.
            </summary>
            <typeparam name="TModel">The type of the model.</typeparam>
        </member>
        <member name="M:MvcExtensions.ObjectMetadataItemBuilder`1.#ctor(MvcExtensions.ObjectMetadataItem)">
            <summary>
            Initializes a new instance of the <see cref="T:MvcExtensions.ObjectMetadataItemBuilder`1"/> class.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="T:MvcExtensions.RangeValidationMetadata`1">
            <summary>
            Represents a class to store range validation metadata.
            </summary>
            <typeparam name="TValueType">The type of the value type.</typeparam>
        </member>
        <member name="M:MvcExtensions.RangeValidationMetadata`1.CreateValidatorCore(MvcExtensions.ExtendedModelMetadata,System.Web.Mvc.ControllerContext)">
            <summary>
            Creates the validator.
            </summary>
            <param name="modelMetadata">The model metadata.</param>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="P:MvcExtensions.RangeValidationMetadata`1.Minimum">
            <summary>
            Gets or sets the minimum.
            </summary>
            <value>The minimum.</value>
        </member>
        <member name="P:MvcExtensions.RangeValidationMetadata`1.Maximum">
            <summary>
            Gets or sets the maximum.
            </summary>
            <value>The maximum.</value>
        </member>
        <member name="T:MvcExtensions.RequiredValidationMetadata">
            <summary>
            Represents a class to store required validation metadata.
            </summary>
        </member>
        <member name="M:MvcExtensions.RequiredValidationMetadata.CreateValidatorCore(MvcExtensions.ExtendedModelMetadata,System.Web.Mvc.ControllerContext)">
            <summary>
            Creates the validator.
            </summary>
            <param name="modelMetadata">The model metadata.</param>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="T:MvcExtensions.StringMetadataItem">
            <summary>
            Defines a class that is used to store <seealso cref="T:System.String"/> metadata.
            </summary>
        </member>
        <member name="P:MvcExtensions.StringMetadataItem.DisplayFormat">
            <summary>
            Gets or sets the display format.
            </summary>
            <value>The display format.</value>
        </member>
        <member name="P:MvcExtensions.StringMetadataItem.EditFormat">
            <summary>
            Gets or sets the edit format.
            </summary>
            <value>The edit format.</value>
        </member>
        <member name="P:MvcExtensions.StringMetadataItem.ApplyFormatInEditMode">
            <summary>
            Gets or sets a value indicating whether to apply format in edit mode.
            </summary>
            <value>
            <c>true</c> if [apply format in edit mode]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MvcExtensions.StringMetadataItem.ConvertEmptyStringToNull">
            <summary>
            Gets or sets a value indicating whether the value would be converted to null when the value is empty string.
            </summary>
            <value>
            <c>true</c> if [convert empty string to null]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:MvcExtensions.StringMetadataItemBuilder">
            <summary>
            Defines a class to fluently configure metadata of a <seealso cref="T:System.String"/> type.
            </summary>
        </member>
        <member name="M:MvcExtensions.StringMetadataItemBuilder.#ctor(MvcExtensions.StringMetadataItem)">
            <summary>
            Initializes a new instance of the <see cref="T:MvcExtensions.StringMetadataItemBuilder"/> class.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:MvcExtensions.StringMetadataItemBuilder.DisplayFormat(System.String)">
            <summary>
            Sets the format in display mode.
            </summary>
            <param name="format">The value.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.StringMetadataItemBuilder.DisplayFormat(System.Func{System.String})">
            <summary>
            Sets the format in display mode.
            </summary>
            <param name="format">The value.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.StringMetadataItemBuilder.EditFormat(System.String)">
            <summary>
            Sets the format in edit mode.
            </summary>
            <param name="format">The format.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.StringMetadataItemBuilder.EditFormat(System.Func{System.String})">
            <summary>
            Sets the format in edit mode.
            </summary>
            <param name="format">The format.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.StringMetadataItemBuilder.Format(System.String)">
            <summary>
            Sets format for both display and edit mode.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.StringMetadataItemBuilder.Format(System.Func{System.String})">
            <summary>
            Sets format for both display and edit mode.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.StringMetadataItemBuilder.ApplyFormatInEditMode">
            <summary>
            Indicates to apply format in edit mode.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.StringMetadataItemBuilder.AsEmail">
            <summary>
            Indicates that the value would appear as email address in display mode.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.StringMetadataItemBuilder.AsHtml">
            <summary>
            Indicates that the value would appear as raw html in display mode, so no encoding will be performed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.StringMetadataItemBuilder.AsUrl">
            <summary>
            Indicates that the value would appear as url in display mode.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.StringMetadataItemBuilder.AsMultilineText">
            <summary>
            Marks the value to render as text area element in edit mode.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.StringMetadataItemBuilder.AsPassword">
            <summary>
            Marks the value to render as password element in edit mode.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.StringMetadataItemBuilder.Expression(System.String)">
            <summary>
            Sets the regular expression that the value must match, this comes into action when is <code>Required</code> is <code>true</code>.
            </summary>
            <param name="pattern">The pattern.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.StringMetadataItemBuilder.Expression(System.String,System.String)">
            <summary>
            Sets the regular expression that the value must match, this comes into action when is <code>Required</code> is <code>true</code>.
            </summary>
            <param name="pattern">The pattern.</param>
            <param name="errorMessage">The error message.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.StringMetadataItemBuilder.Expression(System.String,System.Func{System.String})">
            <summary>
            Sets the regular expression that the value must match, this comes into action when is <code>Required</code> is <code>true</code>.
            </summary>
            <param name="pattern">The pattern.</param>
            <param name="errorMessage">The error message.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.StringMetadataItemBuilder.Expression(System.String,System.Type,System.String)">
            <summary>
            Sets the regular expression that the value must match, this comes into action when is <code>Required</code> is <code>true</code>.
            </summary>
            <param name="pattern">The pattern.</param>
            <param name="errorMessageResourceType">Type of the error message resource.</param>
            <param name="errorMessageResourceName">Name of the error message resource.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.StringMetadataItemBuilder.MaximumLength(System.Int32)">
            <summary>
            Sets the maximum length of the value, this comes into action when is <code>Required</code> is <code>true</code>.
            </summary>
            <param name="length">The length.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.StringMetadataItemBuilder.MaximumLength(System.Int32,System.String)">
            <summary>
            Sets the maximum length of the value, this comes into action when is <code>Required</code> is <code>true</code>.
            </summary>
            <param name="length">The length.</param>
            <param name="errorMessage">The error message.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.StringMetadataItemBuilder.MaximumLength(System.Int32,System.Func{System.String})">
            <summary>
            Sets the maximum length of the value, this comes into action when is <code>Required</code> is <code>true</code>.
            </summary>
            <param name="length">The length.</param>
            <param name="errorMessage">The error message.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.StringMetadataItemBuilder.MaximumLength(System.Int32,System.Type,System.String)">
            <summary>
            Sets the maximum length of the value, this comes into action when is <code>Required</code> is <code>true</code>.
            </summary>
            <param name="length">The length.</param>
            <param name="errorMessageResourceType">Type of the error message resource.</param>
            <param name="errorMessageResourceName">Name of the error message resource.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.StringMetadataItemBuilder.MinimumLength(System.Int32)">
            <summary>
            Sets the minimum length of the value, this comes into action when is <code>Required</code> is <code>true</code>.
            </summary>
            <param name="length">The length.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.StringMetadataItemBuilder.MinimumLength(System.Int32,System.String)">
            <summary>
            Sets the minimum length of the value, this comes into action when is <code>Required</code> is <code>true</code>.
            </summary>
            <param name="length">The length.</param>
            <param name="errorMessage">The error message.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.StringMetadataItemBuilder.MinimumLength(System.Int32,System.Func{System.String})">
            <summary>
            Sets the minimum length of the value, this comes into action when is <code>Required</code> is <code>true</code>.
            </summary>
            <param name="length">The length.</param>
            <param name="errorMessage">The error message.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.StringMetadataItemBuilder.MinimumLength(System.Int32,System.Type,System.String)">
            <summary>
            Sets the minimum length of the value, this comes into action when is <code>Required</code> is <code>true</code>.
            </summary>
            <param name="length">The length.</param>
            <param name="errorMessageResourceType">Type of the error message resource.</param>
            <param name="errorMessageResourceName">Name of the error message resource.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.StringMetadataItemBuilder.Expression(System.String,System.Func{System.String},System.Type,System.String)">
            <summary>
            Sets the regular expression that the value must match, this comes into action when is <code>Required</code> is <code>true</code>.
            </summary>
            <param name="pattern">The pattern.</param>
            <param name="errorMessage">The error message.</param>
            <param name="errorMessageResourceType">Type of the error message resource.</param>
            <param name="errorMessageResourceName">Name of the error message resource.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.StringMetadataItemBuilder.MaximumLength(System.Int32,System.Func{System.String},System.Type,System.String)">
            <summary>
            Sets the maximum length of the value, this comes into action when is <code>Required</code> is <code>true</code>.
            </summary>
            <param name="length">The length.</param>
            <param name="errorMessage">The error message.</param>
            <param name="errorMessageResourceType">Type of the error message resource.</param>
            <param name="errorMessageResourceName">Name of the error message resource.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.StringMetadataItemBuilder.MinimumLength(System.Int32,System.Func{System.String},System.Type,System.String)">
            <summary>
            Sets the minimum length of the value, this comes into action when is <code>Required</code> is <code>true</code>.
            </summary>
            <param name="length">The length.</param>
            <param name="errorMessage">The error message.</param>
            <param name="errorMessageResourceType">Type of the error message resource.</param>
            <param name="errorMessageResourceName">Name of the error message resource.</param>
            <returns></returns>
        </member>
        <member name="P:MvcExtensions.StringMetadataItemBuilder.EmailExpression">
            <summary>
            Gets or sets the email expression.
            </summary>
            <value>The email expression.</value>
        </member>
        <member name="P:MvcExtensions.StringMetadataItemBuilder.EmailErrorMessage">
            <summary>
            Gets or sets the email error message.
            </summary>
            <value>The email error message.</value>
        </member>
        <member name="P:MvcExtensions.StringMetadataItemBuilder.EmailErrorMessageResourceType">
            <summary>
            Gets or sets the type of the email error message resource.
            </summary>
            <value>The type of the email error message resource.</value>
        </member>
        <member name="P:MvcExtensions.StringMetadataItemBuilder.EmailErrorMessageResourceName">
            <summary>
            Gets or sets the name of the email error message resource.
            </summary>
            <value>The name of the email error message resource.</value>
        </member>
        <member name="P:MvcExtensions.StringMetadataItemBuilder.UrlExpression">
            <summary>
            Gets or sets the URL expression.
            </summary>
            <value>The URL expression.</value>
        </member>
        <member name="P:MvcExtensions.StringMetadataItemBuilder.UrlErrorMessage">
            <summary>
            Gets or sets the URL error message.
            </summary>
            <value>The URL error message.</value>
        </member>
        <member name="P:MvcExtensions.StringMetadataItemBuilder.UrlErrorMessageResourceType">
            <summary>
            Gets or sets the type of the URL error message resource.
            </summary>
            <value>The type of the URL error message resource.</value>
        </member>
        <member name="P:MvcExtensions.StringMetadataItemBuilder.UrlErrorMessageResourceName">
            <summary>
            Gets or sets the name of the URL error message resource.
            </summary>
            <value>The name of the URL error message resource.</value>
        </member>
        <member name="T:MvcExtensions.BooleanMetadataItem">
            <summary>
            Defines a class that is used to store <seealso cref="T:System.Boolean"/> metadata.
            </summary>
        </member>
        <member name="T:MvcExtensions.BooleanMetadataItemBuilder">
            <summary>
            Defines a class to fluently configure metadata of a <seealso cref="T:System.Boolean"/> type.
            </summary>
        </member>
        <member name="M:MvcExtensions.BooleanMetadataItemBuilder.#ctor(MvcExtensions.BooleanMetadataItem)">
            <summary>
            Initializes a new instance of the <see cref="T:MvcExtensions.BooleanMetadataItemBuilder"/> class.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="T:MvcExtensions.IModelMetadataAdditionalSetting">
            <summary>
            Represents a marker interface for model metadata additional setting.
            </summary>
        </member>
        <member name="T:MvcExtensions.ModelMetadataItemSelectableElementSetting">
            <summary>
            Define a class that is used to store the selectable element setting.
            </summary>
        </member>
        <member name="P:MvcExtensions.ModelMetadataItemSelectableElementSetting.ViewDataKey">
            <summary>
            Gets or sets the view data key.
            </summary>
            <value>The view data key.</value>
        </member>
        <member name="P:MvcExtensions.ModelMetadataItemSelectableElementSetting.OptionLabel">
            <summary>
            Gets or sets the option label.
            </summary>
            <value>The option label.</value>
        </member>
        <member name="T:MvcExtensions.ValueTypeMetadataItemBuilderExtensions">
            <summary>
            Defines an static class which contains extension methods of <see cref="T:MvcExtensions.ValueTypeMetadataItemBuilder`1"/>.
            </summary>
        </member>
        <member name="M:MvcExtensions.ValueTypeMetadataItemBuilderExtensions.FormatAsCurrency(MvcExtensions.ValueTypeMetadataItemBuilder{System.Decimal})">
            <summary>
            Shows the value in currency format in both display and edit mode.
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ValueTypeMetadataItemBuilderExtensions.FormatAsCurrency(MvcExtensions.ValueTypeMetadataItemBuilder{System.Nullable{System.Decimal}})">
            <summary>
            Shows the value in currency format in both display and edit mode.
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ValueTypeMetadataItemBuilderExtensions.FormatAsDateOnly(MvcExtensions.ValueTypeMetadataItemBuilder{System.DateTime})">
            <summary>
            Shows the only the date part of the value in both display and edit mode.
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ValueTypeMetadataItemBuilderExtensions.FormatAsDateOnly(MvcExtensions.ValueTypeMetadataItemBuilder{System.Nullable{System.DateTime}})">
            <summary>
            Shows the only the date part of the value in both display and edit mode.
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ValueTypeMetadataItemBuilderExtensions.FormatAsTimeOnly(MvcExtensions.ValueTypeMetadataItemBuilder{System.DateTime})">
            <summary>
            Shows the only the time part of the value in both display and edit mode.
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ValueTypeMetadataItemBuilderExtensions.FormatAsTimeOnly(MvcExtensions.ValueTypeMetadataItemBuilder{System.Nullable{System.DateTime}})">
            <summary>
            Shows the only the time part of the value in both display and edit mode.
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="T:MvcExtensions.ExtendedModelValidatorProvider">
            <summary>
            Defines a model validator provider which support fluent registration.
            </summary>
        </member>
        <member name="M:MvcExtensions.ExtendedModelValidatorProvider.GetValidators(System.Web.Mvc.ModelMetadata,System.Web.Mvc.ControllerContext)">
            <summary>
            Gets a list of validators.
            </summary>
            <param name="metadata">The metadata.</param>
            <param name="context">The context.</param>
            <returns>A list of validators.</returns>
        </member>
        <member name="T:MvcExtensions.IModelMetadataConfiguration">
            <summary>
            Represents an interface to store metadata data of a model.
            </summary>
        </member>
        <member name="P:MvcExtensions.IModelMetadataConfiguration.ModelType">
            <summary>
            Gets the type of the model.
            </summary>
            <value>The type of the model.</value>
        </member>
        <member name="P:MvcExtensions.IModelMetadataConfiguration.Configurations">
            <summary>
            Gets the configurations.
            </summary>
            <value>The configurations.</value>
        </member>
        <member name="T:MvcExtensions.ModelMetadataConfiguration`1">
            <summary>
            Defines a base class that is used to configure metadata of a model fluently.
            </summary>
        </member>
        <member name="M:MvcExtensions.ModelMetadataConfiguration`1.Configure(System.Linq.Expressions.Expression{System.Func{`0,System.String}})">
            <summary>
            Configures the string value.
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ModelMetadataConfiguration`1.Configure(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Configures the boolean value.
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ModelMetadataConfiguration`1.Configure(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Boolean}}})">
            <summary>
            Configures the nullable boolean value.
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ModelMetadataConfiguration`1.Configure(System.Linq.Expressions.Expression{System.Func{`0,System.DateTime}})">
            <summary>
            Configures the datetime value.
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ModelMetadataConfiguration`1.Configure(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.DateTime}}})">
            <summary>
            Configures the nullable datetime value.
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ModelMetadataConfiguration`1.Configure(System.Linq.Expressions.Expression{System.Func{`0,System.Byte}})">
            <summary>
            Configures the byte value.
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ModelMetadataConfiguration`1.Configure(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Byte}}})">
            <summary>
            Configures the nullable byte value.
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ModelMetadataConfiguration`1.Configure(System.Linq.Expressions.Expression{System.Func{`0,System.Int16}})">
            <summary>
            Configures the short value.
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ModelMetadataConfiguration`1.Configure(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int16}}})">
            <summary>
            Configures the nullable short value.
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ModelMetadataConfiguration`1.Configure(System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})">
            <summary>
            Configures the integer value.
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ModelMetadataConfiguration`1.Configure(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})">
            <summary>
            Configures the nullable integer value.
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ModelMetadataConfiguration`1.Configure(System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})">
            <summary>
            Configures the long value.
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ModelMetadataConfiguration`1.Configure(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})">
            <summary>
            Configures the nullable long value.
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ModelMetadataConfiguration`1.Configure(System.Linq.Expressions.Expression{System.Func{`0,System.Single}})">
            <summary>
            Configures the float value.
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ModelMetadataConfiguration`1.Configure(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})">
            <summary>
            Configures the nullable float value.
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ModelMetadataConfiguration`1.Configure(System.Linq.Expressions.Expression{System.Func{`0,System.Double}})">
            <summary>
            Configures the double value.
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ModelMetadataConfiguration`1.Configure(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})">
            <summary>
            Configures the nullable double value.
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ModelMetadataConfiguration`1.Configure(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})">
            <summary>
            Configures the decimal value.
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ModelMetadataConfiguration`1.Configure(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})">
            <summary>
            Configures the nullable decimal value.
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ModelMetadataConfiguration`1.Configure``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Configures the specified value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ModelMetadataConfiguration`1.Append``2(System.Linq.Expressions.Expression{System.Func{`0,``1}})">
            <summary>
            Appends the specified configuration.
            </summary>
            <typeparam name="TItem">The type of the item.</typeparam>
            <typeparam name="TType">The type of the type.</typeparam>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="P:MvcExtensions.ModelMetadataConfiguration`1.ModelType">
            <summary>
            Gets the type of the model.
            </summary>
            <value>The type of the model.</value>
        </member>
        <member name="P:MvcExtensions.ModelMetadataConfiguration`1.Configurations">
            <summary>
            Gets the configurations.
            </summary>
            <value>The configurations.</value>
        </member>
        <member name="T:MvcExtensions.ExtendedValidator`1">
            <summary>
            Defines a base class that is used to validate model value.
            </summary>
            <typeparam name="TValidationAttribute">The type of the validation attribute.</typeparam>
        </member>
        <member name="M:MvcExtensions.ExtendedValidator`1.#ctor(System.Web.Mvc.ModelMetadata,System.Web.Mvc.ControllerContext)">
            <summary>
            Initializes a new instance of the <see cref="T:MvcExtensions.ExtendedValidator`1"/> class.
            </summary>
            <param name="metadata">The metadata.</param>
            <param name="controllerContext">The controller context.</param>
        </member>
        <member name="M:MvcExtensions.ExtendedValidator`1.Validate(System.Object)">
            <summary>
            When implemented in a derived class, validates the object.
            </summary>
            <param name="container">The container.</param>
            <returns>A list of validation results.</returns>
        </member>
        <member name="P:MvcExtensions.ExtendedValidator`1.Attribute">
            <summary>
            Gets the attribute.
            </summary>
            <value>The attribute.</value>
        </member>
        <member name="P:MvcExtensions.ExtendedValidator`1.ErrorMessage">
            <summary>
            Gets the error message.
            </summary>
            <value>The error message.</value>
        </member>
        <member name="T:MvcExtensions.ExtendedModelMetadataProvider">
            <summary>
            Defines a metadata provider which supports fluent registration.
            </summary>
        </member>
        <member name="M:MvcExtensions.ExtendedModelMetadataProvider.#ctor(MvcExtensions.IModelMetadataRegistry)">
            <summary>
            Initializes a new instance of the <see cref="T:MvcExtensions.ExtendedModelMetadataProvider"/> class.
            </summary>
            <param name="registry">The registry.</param>
        </member>
        <member name="M:MvcExtensions.ExtendedModelMetadataProvider.GetMetadataForProperties(System.Object,System.Type)">
            <summary>
            Gets a <see cref="T:System.Web.Mvc.ModelMetadata"/> object for each property of a model.
            </summary>
            <param name="container">The container.</param>
            <param name="containerType">The type of the container.</param>
            <returns>
            A <see cref="T:System.Web.Mvc.ModelMetadata"/> object for each property of a model.
            </returns>
        </member>
        <member name="M:MvcExtensions.ExtendedModelMetadataProvider.GetMetadataForProperty(System.Func{System.Object},System.Type,System.String)">
            <summary>
            Gets metadata for the specified property.
            </summary>
            <param name="modelAccessor">The model accessor.</param>
            <param name="containerType">The type of the container.</param>
            <param name="propertyName">The property to get the metadata model for.</param>
            <returns>
            The metadata model for the specified property.
            </returns>
        </member>
        <member name="M:MvcExtensions.ExtendedModelMetadataProvider.GetMetadataForType(System.Func{System.Object},System.Type)">
            <summary>
            Gets metadata for the specified model accessor and model type.
            </summary>
            <param name="modelAccessor">The model accessor.</param>
            <param name="modelType">They type of the model.</param>
            <returns>The metadata.</returns>
        </member>
        <member name="T:MvcExtensions.ViewPageTypeMappingRegistryExtensions">
            <summary>
            Defines an static class which contains extension methods of <see cref="T:MvcExtensions.TypeMappingRegistry`2"/>.
            </summary>
        </member>
        <member name="M:MvcExtensions.ViewPageTypeMappingRegistryExtensions.Register``2(MvcExtensions.TypeMappingRegistry{System.Web.Mvc.IView,System.Web.Mvc.IViewPageActivator})">
            <summary>
            Registers the specified instance.
            </summary>
            <typeparam name="TView">The type of the view.</typeparam>
            <typeparam name="TViewPageActivator">The type of the view page activator.</typeparam>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ViewPageTypeMappingRegistryExtensions.Register``3(MvcExtensions.TypeMappingRegistry{System.Web.Mvc.IView,System.Web.Mvc.IViewPageActivator})">
            <summary>
            Registers the specified instance.
            </summary>
            <typeparam name="TView1">The type of the view1.</typeparam>
            <typeparam name="TView2">The type of the view2.</typeparam>
            <typeparam name="TViewPageActivator">The type of the view page activator.</typeparam>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ViewPageTypeMappingRegistryExtensions.Register``4(MvcExtensions.TypeMappingRegistry{System.Web.Mvc.IView,System.Web.Mvc.IViewPageActivator})">
            <summary>
            Registers the specified instance.
            </summary>
            <typeparam name="TView1">The type of the view1.</typeparam>
            <typeparam name="TView2">The type of the view2.</typeparam>
            <typeparam name="TView3">The type of the view3.</typeparam>
            <typeparam name="TViewPageActivator">The type of the view page activator.</typeparam>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ViewPageTypeMappingRegistryExtensions.Register``5(MvcExtensions.TypeMappingRegistry{System.Web.Mvc.IView,System.Web.Mvc.IViewPageActivator})">
            <summary>
            Registers the specified instance.
            </summary>
            <typeparam name="TView1">The type of the controller1.</typeparam>
            <typeparam name="TView2">The type of the controller2.</typeparam>
            <typeparam name="TView3">The type of the controller3.</typeparam>
            <typeparam name="TView4">The type of the controller4.</typeparam>
            <typeparam name="TViewPageActivator">The type of the controller activator.</typeparam>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:MvcExtensions.ViewPageTypeMappingRegistryExtensions.Register``1(MvcExtensions.TypeMappingRegistry{System.Web.Mvc.IView,System.Web.Mvc.IViewPageActivator},MvcExtensions.TypeCatalog)">
            <summary>
            Registers the specified instance.
            </summary>
            <typeparam name="TViewPageActivator">The type of the view page activator.</typeparam>
            <param name="instance">The instance.</param>
            <param name="typeCatalog">The type catalog.</param>
            <returns></returns>
        </member>
        <member name="T:MvcExtensions.ExtendedViewPageActivator">
            <summary>
            Defines a class which is used to create view.
            </summary>
        </member>
        <member name="M:MvcExtensions.ExtendedViewPageActivator.#ctor(MvcExtensions.ContainerAdapter,MvcExtensions.TypeMappingRegistry{System.Web.Mvc.IView,System.Web.Mvc.IViewPageActivator})">
            <summary>
            Initializes a new instance of the <see cref="T:MvcExtensions.ExtendedViewPageActivator"/> class.
            </summary>
            <param name="container">The container.</param>
            <param name="viewActivatorRegistry">The view activator registry.</param>
        </member>
        <member name="M:MvcExtensions.ExtendedViewPageActivator.Create(System.Web.Mvc.ControllerContext,System.Type)">
            <summary>
            Creates the specified controller context.
            </summary>
            <param name="controllerContext">The controller context.</param>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="P:MvcExtensions.ExtendedViewPageActivator.Container">
            <summary>
            Gets the container.
            </summary>
            <value>The container.</value>
        </member>
        <member name="P:MvcExtensions.ExtendedViewPageActivator.ViewActivatorRegistry">
            <summary>
            Gets or sets the controller activator registry.
            </summary>
            <value>The controller activator registry.</value>
        </member>
    </members>
</doc>
